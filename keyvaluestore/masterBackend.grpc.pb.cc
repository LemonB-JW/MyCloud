// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterBackend.proto

#include "masterBackend.pb.h"
#include "masterBackend.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace masterBackend {

static const char* MasterBackend_method_names[] = {
  "/masterBackend.MasterBackend/get_prim",
  "/masterBackend.MasterBackend/list_sub",
};

std::unique_ptr< MasterBackend::Stub> MasterBackend::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MasterBackend::Stub> stub(new MasterBackend::Stub(channel));
  return stub;
}

MasterBackend::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_prim_(MasterBackend_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_sub_(MasterBackend_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MasterBackend::Stub::get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::masterBackend::GetPrimReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_prim_, context, request, response);
}

void MasterBackend::Stub::experimental_async::get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_prim_, context, request, response, std::move(f));
}

void MasterBackend::Stub::experimental_async::get_prim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_prim_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>* MasterBackend::Stub::Asyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::masterBackend::GetPrimReply>::Create(channel_.get(), cq, rpcmethod_get_prim_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>* MasterBackend::Stub::PrepareAsyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::masterBackend::GetPrimReply>::Create(channel_.get(), cq, rpcmethod_get_prim_, context, request, false);
}

::grpc::Status MasterBackend::Stub::list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::masterBackend::ListSubReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_sub_, context, request, response);
}

void MasterBackend::Stub::experimental_async::list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_sub_, context, request, response, std::move(f));
}

void MasterBackend::Stub::experimental_async::list_sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_sub_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>* MasterBackend::Stub::Asynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::masterBackend::ListSubReply>::Create(channel_.get(), cq, rpcmethod_list_sub_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>* MasterBackend::Stub::PrepareAsynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::masterBackend::ListSubReply>::Create(channel_.get(), cq, rpcmethod_list_sub_, context, request, false);
}

MasterBackend::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterBackend_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterBackend::Service, ::masterBackend::GetPrimRequest, ::masterBackend::GetPrimReply>(
          std::mem_fn(&MasterBackend::Service::get_prim), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterBackend_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterBackend::Service, ::masterBackend::ListSubRequest, ::masterBackend::ListSubReply>(
          std::mem_fn(&MasterBackend::Service::list_sub), this)));
}

MasterBackend::Service::~Service() {
}

::grpc::Status MasterBackend::Service::get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MasterBackend::Service::list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterBackend

