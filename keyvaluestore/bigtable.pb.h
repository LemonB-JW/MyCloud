// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bigtable.proto

#ifndef PROTOBUF_INCLUDED_bigtable_2eproto
#define PROTOBUF_INCLUDED_bigtable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bigtable_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_bigtable_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_bigtable_2eproto();
namespace bigtable {
class CPutReply;
class CPutReplyDefaultTypeInternal;
extern CPutReplyDefaultTypeInternal _CPutReply_default_instance_;
class CPutRequest;
class CPutRequestDefaultTypeInternal;
extern CPutRequestDefaultTypeInternal _CPutRequest_default_instance_;
class DelReply;
class DelReplyDefaultTypeInternal;
extern DelReplyDefaultTypeInternal _DelReply_default_instance_;
class DelRequest;
class DelRequestDefaultTypeInternal;
extern DelRequestDefaultTypeInternal _DelRequest_default_instance_;
class GetEmailListReply;
class GetEmailListReplyDefaultTypeInternal;
extern GetEmailListReplyDefaultTypeInternal _GetEmailListReply_default_instance_;
class GetEmailListRequest;
class GetEmailListRequestDefaultTypeInternal;
extern GetEmailListRequestDefaultTypeInternal _GetEmailListRequest_default_instance_;
class GetFileListReply;
class GetFileListReplyDefaultTypeInternal;
extern GetFileListReplyDefaultTypeInternal _GetFileListReply_default_instance_;
class GetFileListRequest;
class GetFileListRequestDefaultTypeInternal;
extern GetFileListRequestDefaultTypeInternal _GetFileListRequest_default_instance_;
class GetReply;
class GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class PutReply;
class PutReplyDefaultTypeInternal;
extern PutReplyDefaultTypeInternal _PutReply_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class fileMetaData;
class fileMetaDataDefaultTypeInternal;
extern fileMetaDataDefaultTypeInternal _fileMetaData_default_instance_;
}  // namespace bigtable
namespace google {
namespace protobuf {
template<> ::bigtable::CPutReply* Arena::CreateMaybeMessage<::bigtable::CPutReply>(Arena*);
template<> ::bigtable::CPutRequest* Arena::CreateMaybeMessage<::bigtable::CPutRequest>(Arena*);
template<> ::bigtable::DelReply* Arena::CreateMaybeMessage<::bigtable::DelReply>(Arena*);
template<> ::bigtable::DelRequest* Arena::CreateMaybeMessage<::bigtable::DelRequest>(Arena*);
template<> ::bigtable::GetEmailListReply* Arena::CreateMaybeMessage<::bigtable::GetEmailListReply>(Arena*);
template<> ::bigtable::GetEmailListRequest* Arena::CreateMaybeMessage<::bigtable::GetEmailListRequest>(Arena*);
template<> ::bigtable::GetFileListReply* Arena::CreateMaybeMessage<::bigtable::GetFileListReply>(Arena*);
template<> ::bigtable::GetFileListRequest* Arena::CreateMaybeMessage<::bigtable::GetFileListRequest>(Arena*);
template<> ::bigtable::GetReply* Arena::CreateMaybeMessage<::bigtable::GetReply>(Arena*);
template<> ::bigtable::GetRequest* Arena::CreateMaybeMessage<::bigtable::GetRequest>(Arena*);
template<> ::bigtable::PutReply* Arena::CreateMaybeMessage<::bigtable::PutReply>(Arena*);
template<> ::bigtable::PutRequest* Arena::CreateMaybeMessage<::bigtable::PutRequest>(Arena*);
template<> ::bigtable::fileMetaData* Arena::CreateMaybeMessage<::bigtable::fileMetaData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bigtable {

// ===================================================================

class PutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string created_time = 1;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 1;
  const ::std::string& created_time() const;
  void set_created_time(const ::std::string& value);
  #if LANG_CXX11
  void set_created_time(::std::string&& value);
  #endif
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  ::std::string* mutable_created_time();
  ::std::string* release_created_time();
  void set_allocated_created_time(::std::string* created_time);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_type = 4;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 4;
  const ::std::string& file_type() const;
  void set_file_type(const ::std::string& value);
  #if LANG_CXX11
  void set_file_type(::std::string&& value);
  #endif
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  ::std::string* mutable_file_type();
  ::std::string* release_file_type();
  void set_allocated_file_type(::std::string* file_type);

  // string file_from = 5;
  void clear_file_from();
  static const int kFileFromFieldNumber = 5;
  const ::std::string& file_from() const;
  void set_file_from(const ::std::string& value);
  #if LANG_CXX11
  void set_file_from(::std::string&& value);
  #endif
  void set_file_from(const char* value);
  void set_file_from(const char* value, size_t size);
  ::std::string* mutable_file_from();
  ::std::string* release_file_from();
  void set_allocated_file_from(::std::string* file_from);

  // string row = 6;
  void clear_row();
  static const int kRowFieldNumber = 6;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // string col = 7;
  void clear_col();
  static const int kColFieldNumber = 7;
  const ::std::string& col() const;
  void set_col(const ::std::string& value);
  #if LANG_CXX11
  void set_col(::std::string&& value);
  #endif
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  ::std::string* mutable_col();
  ::std::string* release_col();
  void set_allocated_col(::std::string* col);

  // string data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bigtable.PutRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr created_time_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_type_;
  ::google::protobuf::internal::ArenaStringPtr file_from_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr col_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class PutReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.PutReply) */ {
 public:
  PutReply();
  virtual ~PutReply();

  PutReply(const PutReply& from);

  inline PutReply& operator=(const PutReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutReply(PutReply&& from) noexcept
    : PutReply() {
    *this = ::std::move(from);
  }

  inline PutReply& operator=(PutReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutReply* internal_default_instance() {
    return reinterpret_cast<const PutReply*>(
               &_PutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PutReply* other);
  friend void swap(PutReply& a, PutReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutReply* New() const final {
    return CreateMaybeMessage<PutReply>(nullptr);
  }

  PutReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutReply& from);
  void MergeFrom(const PutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:bigtable.PutReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(nullptr);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // string col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  const ::std::string& col() const;
  void set_col(const ::std::string& value);
  #if LANG_CXX11
  void set_col(::std::string&& value);
  #endif
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  ::std::string* mutable_col();
  ::std::string* release_col();
  void set_allocated_col(::std::string* col);

  // @@protoc_insertion_point(class_scope:bigtable.GetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetReply) */ {
 public:
  GetReply();
  virtual ~GetReply();

  GetReply(const GetReply& from);

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(GetReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetReply* other);
  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetReply* New() const final {
    return CreateMaybeMessage<GetReply>(nullptr);
  }

  GetReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetReply& from);
  void MergeFrom(const GetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:bigtable.GetReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class CPutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.CPutRequest) */ {
 public:
  CPutRequest();
  virtual ~CPutRequest();

  CPutRequest(const CPutRequest& from);

  inline CPutRequest& operator=(const CPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPutRequest(CPutRequest&& from) noexcept
    : CPutRequest() {
    *this = ::std::move(from);
  }

  inline CPutRequest& operator=(CPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPutRequest* internal_default_instance() {
    return reinterpret_cast<const CPutRequest*>(
               &_CPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CPutRequest* other);
  friend void swap(CPutRequest& a, CPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPutRequest* New() const final {
    return CreateMaybeMessage<CPutRequest>(nullptr);
  }

  CPutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPutRequest& from);
  void MergeFrom(const CPutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string created_time = 1;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 1;
  const ::std::string& created_time() const;
  void set_created_time(const ::std::string& value);
  #if LANG_CXX11
  void set_created_time(::std::string&& value);
  #endif
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  ::std::string* mutable_created_time();
  ::std::string* release_created_time();
  void set_allocated_created_time(::std::string* created_time);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_type = 4;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 4;
  const ::std::string& file_type() const;
  void set_file_type(const ::std::string& value);
  #if LANG_CXX11
  void set_file_type(::std::string&& value);
  #endif
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  ::std::string* mutable_file_type();
  ::std::string* release_file_type();
  void set_allocated_file_type(::std::string* file_type);

  // string file_from = 5;
  void clear_file_from();
  static const int kFileFromFieldNumber = 5;
  const ::std::string& file_from() const;
  void set_file_from(const ::std::string& value);
  #if LANG_CXX11
  void set_file_from(::std::string&& value);
  #endif
  void set_file_from(const char* value);
  void set_file_from(const char* value, size_t size);
  ::std::string* mutable_file_from();
  ::std::string* release_file_from();
  void set_allocated_file_from(::std::string* file_from);

  // string row = 6;
  void clear_row();
  static const int kRowFieldNumber = 6;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // string col = 7;
  void clear_col();
  static const int kColFieldNumber = 7;
  const ::std::string& col() const;
  void set_col(const ::std::string& value);
  #if LANG_CXX11
  void set_col(::std::string&& value);
  #endif
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  ::std::string* mutable_col();
  ::std::string* release_col();
  void set_allocated_col(::std::string* col);

  // string old_data = 8;
  void clear_old_data();
  static const int kOldDataFieldNumber = 8;
  const ::std::string& old_data() const;
  void set_old_data(const ::std::string& value);
  #if LANG_CXX11
  void set_old_data(::std::string&& value);
  #endif
  void set_old_data(const char* value);
  void set_old_data(const char* value, size_t size);
  ::std::string* mutable_old_data();
  ::std::string* release_old_data();
  void set_allocated_old_data(::std::string* old_data);

  // string new_data = 9;
  void clear_new_data();
  static const int kNewDataFieldNumber = 9;
  const ::std::string& new_data() const;
  void set_new_data(const ::std::string& value);
  #if LANG_CXX11
  void set_new_data(::std::string&& value);
  #endif
  void set_new_data(const char* value);
  void set_new_data(const char* value, size_t size);
  ::std::string* mutable_new_data();
  ::std::string* release_new_data();
  void set_allocated_new_data(::std::string* new_data);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bigtable.CPutRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr created_time_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_type_;
  ::google::protobuf::internal::ArenaStringPtr file_from_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr col_;
  ::google::protobuf::internal::ArenaStringPtr old_data_;
  ::google::protobuf::internal::ArenaStringPtr new_data_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class CPutReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.CPutReply) */ {
 public:
  CPutReply();
  virtual ~CPutReply();

  CPutReply(const CPutReply& from);

  inline CPutReply& operator=(const CPutReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CPutReply(CPutReply&& from) noexcept
    : CPutReply() {
    *this = ::std::move(from);
  }

  inline CPutReply& operator=(CPutReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CPutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPutReply* internal_default_instance() {
    return reinterpret_cast<const CPutReply*>(
               &_CPutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CPutReply* other);
  friend void swap(CPutReply& a, CPutReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CPutReply* New() const final {
    return CreateMaybeMessage<CPutReply>(nullptr);
  }

  CPutReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CPutReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CPutReply& from);
  void MergeFrom(const CPutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPutReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:bigtable.CPutReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class DelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.DelRequest) */ {
 public:
  DelRequest();
  virtual ~DelRequest();

  DelRequest(const DelRequest& from);

  inline DelRequest& operator=(const DelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelRequest(DelRequest&& from) noexcept
    : DelRequest() {
    *this = ::std::move(from);
  }

  inline DelRequest& operator=(DelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelRequest* internal_default_instance() {
    return reinterpret_cast<const DelRequest*>(
               &_DelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DelRequest* other);
  friend void swap(DelRequest& a, DelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelRequest* New() const final {
    return CreateMaybeMessage<DelRequest>(nullptr);
  }

  DelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelRequest& from);
  void MergeFrom(const DelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // string col = 2;
  void clear_col();
  static const int kColFieldNumber = 2;
  const ::std::string& col() const;
  void set_col(const ::std::string& value);
  #if LANG_CXX11
  void set_col(::std::string&& value);
  #endif
  void set_col(const char* value);
  void set_col(const char* value, size_t size);
  ::std::string* mutable_col();
  ::std::string* release_col();
  void set_allocated_col(::std::string* col);

  // @@protoc_insertion_point(class_scope:bigtable.DelRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr col_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class DelReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.DelReply) */ {
 public:
  DelReply();
  virtual ~DelReply();

  DelReply(const DelReply& from);

  inline DelReply& operator=(const DelReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelReply(DelReply&& from) noexcept
    : DelReply() {
    *this = ::std::move(from);
  }

  inline DelReply& operator=(DelReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DelReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelReply* internal_default_instance() {
    return reinterpret_cast<const DelReply*>(
               &_DelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DelReply* other);
  friend void swap(DelReply& a, DelReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelReply* New() const final {
    return CreateMaybeMessage<DelReply>(nullptr);
  }

  DelReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelReply& from);
  void MergeFrom(const DelReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  bool ret() const;
  void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:bigtable.DelReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class fileMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.fileMetaData) */ {
 public:
  fileMetaData();
  virtual ~fileMetaData();

  fileMetaData(const fileMetaData& from);

  inline fileMetaData& operator=(const fileMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fileMetaData(fileMetaData&& from) noexcept
    : fileMetaData() {
    *this = ::std::move(from);
  }

  inline fileMetaData& operator=(fileMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const fileMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fileMetaData* internal_default_instance() {
    return reinterpret_cast<const fileMetaData*>(
               &_fileMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(fileMetaData* other);
  friend void swap(fileMetaData& a, fileMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fileMetaData* New() const final {
    return CreateMaybeMessage<fileMetaData>(nullptr);
  }

  fileMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<fileMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const fileMetaData& from);
  void MergeFrom(const fileMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fileMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string created_time = 1;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 1;
  const ::std::string& created_time() const;
  void set_created_time(const ::std::string& value);
  #if LANG_CXX11
  void set_created_time(::std::string&& value);
  #endif
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  ::std::string* mutable_created_time();
  ::std::string* release_created_time();
  void set_allocated_created_time(::std::string* created_time);

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_type = 4;
  void clear_file_type();
  static const int kFileTypeFieldNumber = 4;
  const ::std::string& file_type() const;
  void set_file_type(const ::std::string& value);
  #if LANG_CXX11
  void set_file_type(::std::string&& value);
  #endif
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  ::std::string* mutable_file_type();
  ::std::string* release_file_type();
  void set_allocated_file_type(::std::string* file_type);

  // string file_from = 5;
  void clear_file_from();
  static const int kFileFromFieldNumber = 5;
  const ::std::string& file_from() const;
  void set_file_from(const ::std::string& value);
  #if LANG_CXX11
  void set_file_from(::std::string&& value);
  #endif
  void set_file_from(const char* value);
  void set_file_from(const char* value, size_t size);
  ::std::string* mutable_file_from();
  ::std::string* release_file_from();
  void set_allocated_file_from(::std::string* file_from);

  // string file_id = 6;
  void clear_file_id();
  static const int kFileIdFieldNumber = 6;
  const ::std::string& file_id() const;
  void set_file_id(const ::std::string& value);
  #if LANG_CXX11
  void set_file_id(::std::string&& value);
  #endif
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  ::std::string* mutable_file_id();
  ::std::string* release_file_id();
  void set_allocated_file_id(::std::string* file_id);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bigtable.fileMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr created_time_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_type_;
  ::google::protobuf::internal::ArenaStringPtr file_from_;
  ::google::protobuf::internal::ArenaStringPtr file_id_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetEmailListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetEmailListRequest) */ {
 public:
  GetEmailListRequest();
  virtual ~GetEmailListRequest();

  GetEmailListRequest(const GetEmailListRequest& from);

  inline GetEmailListRequest& operator=(const GetEmailListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetEmailListRequest(GetEmailListRequest&& from) noexcept
    : GetEmailListRequest() {
    *this = ::std::move(from);
  }

  inline GetEmailListRequest& operator=(GetEmailListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetEmailListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailListRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmailListRequest*>(
               &_GetEmailListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetEmailListRequest* other);
  friend void swap(GetEmailListRequest& a, GetEmailListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEmailListRequest* New() const final {
    return CreateMaybeMessage<GetEmailListRequest>(nullptr);
  }

  GetEmailListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetEmailListRequest& from);
  void MergeFrom(const GetEmailListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // @@protoc_insertion_point(class_scope:bigtable.GetEmailListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetEmailListReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetEmailListReply) */ {
 public:
  GetEmailListReply();
  virtual ~GetEmailListReply();

  GetEmailListReply(const GetEmailListReply& from);

  inline GetEmailListReply& operator=(const GetEmailListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetEmailListReply(GetEmailListReply&& from) noexcept
    : GetEmailListReply() {
    *this = ::std::move(from);
  }

  inline GetEmailListReply& operator=(GetEmailListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetEmailListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEmailListReply* internal_default_instance() {
    return reinterpret_cast<const GetEmailListReply*>(
               &_GetEmailListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetEmailListReply* other);
  friend void swap(GetEmailListReply& a, GetEmailListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEmailListReply* New() const final {
    return CreateMaybeMessage<GetEmailListReply>(nullptr);
  }

  GetEmailListReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetEmailListReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetEmailListReply& from);
  void MergeFrom(const GetEmailListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmailListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigtable.fileMetaData metadata = 1;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  ::bigtable::fileMetaData* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >*
      mutable_metadata();
  const ::bigtable::fileMetaData& metadata(int index) const;
  ::bigtable::fileMetaData* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:bigtable.GetEmailListReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData > metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetFileListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetFileListRequest) */ {
 public:
  GetFileListRequest();
  virtual ~GetFileListRequest();

  GetFileListRequest(const GetFileListRequest& from);

  inline GetFileListRequest& operator=(const GetFileListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFileListRequest(GetFileListRequest&& from) noexcept
    : GetFileListRequest() {
    *this = ::std::move(from);
  }

  inline GetFileListRequest& operator=(GetFileListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileListRequest*>(
               &_GetFileListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetFileListRequest* other);
  friend void swap(GetFileListRequest& a, GetFileListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileListRequest* New() const final {
    return CreateMaybeMessage<GetFileListRequest>(nullptr);
  }

  GetFileListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFileListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFileListRequest& from);
  void MergeFrom(const GetFileListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string row = 1;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // @@protoc_insertion_point(class_scope:bigtable.GetFileListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// -------------------------------------------------------------------

class GetFileListReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bigtable.GetFileListReply) */ {
 public:
  GetFileListReply();
  virtual ~GetFileListReply();

  GetFileListReply(const GetFileListReply& from);

  inline GetFileListReply& operator=(const GetFileListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFileListReply(GetFileListReply&& from) noexcept
    : GetFileListReply() {
    *this = ::std::move(from);
  }

  inline GetFileListReply& operator=(GetFileListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileListReply* internal_default_instance() {
    return reinterpret_cast<const GetFileListReply*>(
               &_GetFileListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetFileListReply* other);
  friend void swap(GetFileListReply& a, GetFileListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileListReply* New() const final {
    return CreateMaybeMessage<GetFileListReply>(nullptr);
  }

  GetFileListReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFileListReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFileListReply& from);
  void MergeFrom(const GetFileListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bigtable.fileMetaData metadata = 1;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  ::bigtable::fileMetaData* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >*
      mutable_metadata();
  const ::bigtable::fileMetaData& metadata(int index) const;
  ::bigtable::fileMetaData* add_metadata();
  const ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >&
      metadata() const;

  // @@protoc_insertion_point(class_scope:bigtable.GetFileListReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData > metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bigtable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PutRequest

// string created_time = 1;
inline void PutRequest::clear_created_time() {
  created_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::created_time() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.created_time)
  return created_time_.GetNoArena();
}
inline void PutRequest::set_created_time(const ::std::string& value) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.created_time)
}
#if LANG_CXX11
inline void PutRequest::set_created_time(::std::string&& value) {
  
  created_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.created_time)
}
#endif
inline void PutRequest::set_created_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.created_time)
}
inline void PutRequest::set_created_time(const char* value, size_t size) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.created_time)
}
inline ::std::string* PutRequest::mutable_created_time() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.created_time)
  return created_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_created_time() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.created_time)
  
  return created_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_created_time(::std::string* created_time) {
  if (created_time != nullptr) {
    
  } else {
    
  }
  created_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_time);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.created_time)
}

// int32 size = 2;
inline void PutRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 PutRequest::size() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.size)
  return size_;
}
inline void PutRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.size)
}

// string file_name = 3;
inline void PutRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::file_name() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.file_name)
  return file_name_.GetNoArena();
}
inline void PutRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.file_name)
}
#if LANG_CXX11
inline void PutRequest::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.file_name)
}
#endif
inline void PutRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.file_name)
}
inline void PutRequest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.file_name)
}
inline ::std::string* PutRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.file_name)
}

// string file_type = 4;
inline void PutRequest::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::file_type() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.file_type)
  return file_type_.GetNoArena();
}
inline void PutRequest::set_file_type(const ::std::string& value) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.file_type)
}
#if LANG_CXX11
inline void PutRequest::set_file_type(::std::string&& value) {
  
  file_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.file_type)
}
#endif
inline void PutRequest::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.file_type)
}
inline void PutRequest::set_file_type(const char* value, size_t size) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.file_type)
}
inline ::std::string* PutRequest::mutable_file_type() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.file_type)
  return file_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_file_type() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.file_type)
  
  return file_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_file_type(::std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.file_type)
}

// string file_from = 5;
inline void PutRequest::clear_file_from() {
  file_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::file_from() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.file_from)
  return file_from_.GetNoArena();
}
inline void PutRequest::set_file_from(const ::std::string& value) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.file_from)
}
#if LANG_CXX11
inline void PutRequest::set_file_from(::std::string&& value) {
  
  file_from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.file_from)
}
#endif
inline void PutRequest::set_file_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.file_from)
}
inline void PutRequest::set_file_from(const char* value, size_t size) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.file_from)
}
inline ::std::string* PutRequest::mutable_file_from() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.file_from)
  return file_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_file_from() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.file_from)
  
  return file_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_file_from(::std::string* file_from) {
  if (file_from != nullptr) {
    
  } else {
    
  }
  file_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_from);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.file_from)
}

// string row = 6;
inline void PutRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.row)
  return row_.GetNoArena();
}
inline void PutRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.row)
}
#if LANG_CXX11
inline void PutRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.row)
}
#endif
inline void PutRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.row)
}
inline void PutRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.row)
}
inline ::std::string* PutRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.row)
}

// string col = 7;
inline void PutRequest::clear_col() {
  col_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::col() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.col)
  return col_.GetNoArena();
}
inline void PutRequest::set_col(const ::std::string& value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.col)
}
#if LANG_CXX11
inline void PutRequest::set_col(::std::string&& value) {
  
  col_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.col)
}
#endif
inline void PutRequest::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.col)
}
inline void PutRequest::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.col)
}
inline ::std::string* PutRequest::mutable_col() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.col)
  return col_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_col() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.col)
  
  return col_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_col(::std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.col)
}

// string data = 8;
inline void PutRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::data() const {
  // @@protoc_insertion_point(field_get:bigtable.PutRequest.data)
  return data_.GetNoArena();
}
inline void PutRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.PutRequest.data)
}
#if LANG_CXX11
inline void PutRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.PutRequest.data)
}
#endif
inline void PutRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.PutRequest.data)
}
inline void PutRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.PutRequest.data)
}
inline ::std::string* PutRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.PutRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_data() {
  // @@protoc_insertion_point(field_release:bigtable.PutRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bigtable.PutRequest.data)
}

// -------------------------------------------------------------------

// PutReply

// bool ret = 1;
inline void PutReply::clear_ret() {
  ret_ = false;
}
inline bool PutReply::ret() const {
  // @@protoc_insertion_point(field_get:bigtable.PutReply.ret)
  return ret_;
}
inline void PutReply::set_ret(bool value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:bigtable.PutReply.ret)
}

// -------------------------------------------------------------------

// GetRequest

// string row = 1;
inline void GetRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.GetRequest.row)
  return row_.GetNoArena();
}
inline void GetRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.GetRequest.row)
}
#if LANG_CXX11
inline void GetRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.GetRequest.row)
}
#endif
inline void GetRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.GetRequest.row)
}
inline void GetRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.GetRequest.row)
}
inline ::std::string* GetRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.GetRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.GetRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.GetRequest.row)
}

// string col = 2;
inline void GetRequest::clear_col() {
  col_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::col() const {
  // @@protoc_insertion_point(field_get:bigtable.GetRequest.col)
  return col_.GetNoArena();
}
inline void GetRequest::set_col(const ::std::string& value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.GetRequest.col)
}
#if LANG_CXX11
inline void GetRequest::set_col(::std::string&& value) {
  
  col_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.GetRequest.col)
}
#endif
inline void GetRequest::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.GetRequest.col)
}
inline void GetRequest::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.GetRequest.col)
}
inline ::std::string* GetRequest::mutable_col() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.GetRequest.col)
  return col_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_col() {
  // @@protoc_insertion_point(field_release:bigtable.GetRequest.col)
  
  return col_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_col(::std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:bigtable.GetRequest.col)
}

// -------------------------------------------------------------------

// GetReply

// string content = 1;
inline void GetReply::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetReply::content() const {
  // @@protoc_insertion_point(field_get:bigtable.GetReply.content)
  return content_.GetNoArena();
}
inline void GetReply::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.GetReply.content)
}
#if LANG_CXX11
inline void GetReply::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.GetReply.content)
}
#endif
inline void GetReply::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.GetReply.content)
}
inline void GetReply::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.GetReply.content)
}
inline ::std::string* GetReply::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.GetReply.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetReply::release_content() {
  // @@protoc_insertion_point(field_release:bigtable.GetReply.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetReply::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:bigtable.GetReply.content)
}

// -------------------------------------------------------------------

// CPutRequest

// string created_time = 1;
inline void CPutRequest::clear_created_time() {
  created_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::created_time() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.created_time)
  return created_time_.GetNoArena();
}
inline void CPutRequest::set_created_time(const ::std::string& value) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.created_time)
}
#if LANG_CXX11
inline void CPutRequest::set_created_time(::std::string&& value) {
  
  created_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.created_time)
}
#endif
inline void CPutRequest::set_created_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.created_time)
}
inline void CPutRequest::set_created_time(const char* value, size_t size) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.created_time)
}
inline ::std::string* CPutRequest::mutable_created_time() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.created_time)
  return created_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_created_time() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.created_time)
  
  return created_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_created_time(::std::string* created_time) {
  if (created_time != nullptr) {
    
  } else {
    
  }
  created_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_time);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.created_time)
}

// int32 size = 2;
inline void CPutRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 CPutRequest::size() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.size)
  return size_;
}
inline void CPutRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.size)
}

// string file_name = 3;
inline void CPutRequest::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::file_name() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.file_name)
  return file_name_.GetNoArena();
}
inline void CPutRequest::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.file_name)
}
#if LANG_CXX11
inline void CPutRequest::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.file_name)
}
#endif
inline void CPutRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.file_name)
}
inline void CPutRequest::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.file_name)
}
inline ::std::string* CPutRequest::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.file_name)
}

// string file_type = 4;
inline void CPutRequest::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::file_type() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.file_type)
  return file_type_.GetNoArena();
}
inline void CPutRequest::set_file_type(const ::std::string& value) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.file_type)
}
#if LANG_CXX11
inline void CPutRequest::set_file_type(::std::string&& value) {
  
  file_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.file_type)
}
#endif
inline void CPutRequest::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.file_type)
}
inline void CPutRequest::set_file_type(const char* value, size_t size) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.file_type)
}
inline ::std::string* CPutRequest::mutable_file_type() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.file_type)
  return file_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_file_type() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.file_type)
  
  return file_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_file_type(::std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.file_type)
}

// string file_from = 5;
inline void CPutRequest::clear_file_from() {
  file_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::file_from() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.file_from)
  return file_from_.GetNoArena();
}
inline void CPutRequest::set_file_from(const ::std::string& value) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.file_from)
}
#if LANG_CXX11
inline void CPutRequest::set_file_from(::std::string&& value) {
  
  file_from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.file_from)
}
#endif
inline void CPutRequest::set_file_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.file_from)
}
inline void CPutRequest::set_file_from(const char* value, size_t size) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.file_from)
}
inline ::std::string* CPutRequest::mutable_file_from() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.file_from)
  return file_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_file_from() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.file_from)
  
  return file_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_file_from(::std::string* file_from) {
  if (file_from != nullptr) {
    
  } else {
    
  }
  file_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_from);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.file_from)
}

// string row = 6;
inline void CPutRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.row)
  return row_.GetNoArena();
}
inline void CPutRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.row)
}
#if LANG_CXX11
inline void CPutRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.row)
}
#endif
inline void CPutRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.row)
}
inline void CPutRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.row)
}
inline ::std::string* CPutRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.row)
}

// string col = 7;
inline void CPutRequest::clear_col() {
  col_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::col() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.col)
  return col_.GetNoArena();
}
inline void CPutRequest::set_col(const ::std::string& value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.col)
}
#if LANG_CXX11
inline void CPutRequest::set_col(::std::string&& value) {
  
  col_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.col)
}
#endif
inline void CPutRequest::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.col)
}
inline void CPutRequest::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.col)
}
inline ::std::string* CPutRequest::mutable_col() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.col)
  return col_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_col() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.col)
  
  return col_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_col(::std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.col)
}

// string old_data = 8;
inline void CPutRequest::clear_old_data() {
  old_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::old_data() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.old_data)
  return old_data_.GetNoArena();
}
inline void CPutRequest::set_old_data(const ::std::string& value) {
  
  old_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.old_data)
}
#if LANG_CXX11
inline void CPutRequest::set_old_data(::std::string&& value) {
  
  old_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.old_data)
}
#endif
inline void CPutRequest::set_old_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.old_data)
}
inline void CPutRequest::set_old_data(const char* value, size_t size) {
  
  old_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.old_data)
}
inline ::std::string* CPutRequest::mutable_old_data() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.old_data)
  return old_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_old_data() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.old_data)
  
  return old_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_old_data(::std::string* old_data) {
  if (old_data != nullptr) {
    
  } else {
    
  }
  old_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_data);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.old_data)
}

// string new_data = 9;
inline void CPutRequest::clear_new_data() {
  new_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CPutRequest::new_data() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutRequest.new_data)
  return new_data_.GetNoArena();
}
inline void CPutRequest::set_new_data(const ::std::string& value) {
  
  new_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.CPutRequest.new_data)
}
#if LANG_CXX11
inline void CPutRequest::set_new_data(::std::string&& value) {
  
  new_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.CPutRequest.new_data)
}
#endif
inline void CPutRequest::set_new_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.CPutRequest.new_data)
}
inline void CPutRequest::set_new_data(const char* value, size_t size) {
  
  new_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.CPutRequest.new_data)
}
inline ::std::string* CPutRequest::mutable_new_data() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.CPutRequest.new_data)
  return new_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPutRequest::release_new_data() {
  // @@protoc_insertion_point(field_release:bigtable.CPutRequest.new_data)
  
  return new_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPutRequest::set_allocated_new_data(::std::string* new_data) {
  if (new_data != nullptr) {
    
  } else {
    
  }
  new_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_data);
  // @@protoc_insertion_point(field_set_allocated:bigtable.CPutRequest.new_data)
}

// -------------------------------------------------------------------

// CPutReply

// bool ret = 1;
inline void CPutReply::clear_ret() {
  ret_ = false;
}
inline bool CPutReply::ret() const {
  // @@protoc_insertion_point(field_get:bigtable.CPutReply.ret)
  return ret_;
}
inline void CPutReply::set_ret(bool value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:bigtable.CPutReply.ret)
}

// -------------------------------------------------------------------

// DelRequest

// string row = 1;
inline void DelRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.DelRequest.row)
  return row_.GetNoArena();
}
inline void DelRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.DelRequest.row)
}
#if LANG_CXX11
inline void DelRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.DelRequest.row)
}
#endif
inline void DelRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.DelRequest.row)
}
inline void DelRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.DelRequest.row)
}
inline ::std::string* DelRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.DelRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.DelRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.DelRequest.row)
}

// string col = 2;
inline void DelRequest::clear_col() {
  col_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DelRequest::col() const {
  // @@protoc_insertion_point(field_get:bigtable.DelRequest.col)
  return col_.GetNoArena();
}
inline void DelRequest::set_col(const ::std::string& value) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.DelRequest.col)
}
#if LANG_CXX11
inline void DelRequest::set_col(::std::string&& value) {
  
  col_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.DelRequest.col)
}
#endif
inline void DelRequest::set_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.DelRequest.col)
}
inline void DelRequest::set_col(const char* value, size_t size) {
  
  col_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.DelRequest.col)
}
inline ::std::string* DelRequest::mutable_col() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.DelRequest.col)
  return col_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelRequest::release_col() {
  // @@protoc_insertion_point(field_release:bigtable.DelRequest.col)
  
  return col_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelRequest::set_allocated_col(::std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  col_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col);
  // @@protoc_insertion_point(field_set_allocated:bigtable.DelRequest.col)
}

// -------------------------------------------------------------------

// DelReply

// bool ret = 1;
inline void DelReply::clear_ret() {
  ret_ = false;
}
inline bool DelReply::ret() const {
  // @@protoc_insertion_point(field_get:bigtable.DelReply.ret)
  return ret_;
}
inline void DelReply::set_ret(bool value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:bigtable.DelReply.ret)
}

// -------------------------------------------------------------------

// fileMetaData

// string created_time = 1;
inline void fileMetaData::clear_created_time() {
  created_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fileMetaData::created_time() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.created_time)
  return created_time_.GetNoArena();
}
inline void fileMetaData::set_created_time(const ::std::string& value) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.created_time)
}
#if LANG_CXX11
inline void fileMetaData::set_created_time(::std::string&& value) {
  
  created_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.fileMetaData.created_time)
}
#endif
inline void fileMetaData::set_created_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.fileMetaData.created_time)
}
inline void fileMetaData::set_created_time(const char* value, size_t size) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.fileMetaData.created_time)
}
inline ::std::string* fileMetaData::mutable_created_time() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.fileMetaData.created_time)
  return created_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileMetaData::release_created_time() {
  // @@protoc_insertion_point(field_release:bigtable.fileMetaData.created_time)
  
  return created_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileMetaData::set_allocated_created_time(::std::string* created_time) {
  if (created_time != nullptr) {
    
  } else {
    
  }
  created_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_time);
  // @@protoc_insertion_point(field_set_allocated:bigtable.fileMetaData.created_time)
}

// int32 size = 2;
inline void fileMetaData::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 fileMetaData::size() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.size)
  return size_;
}
inline void fileMetaData::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.size)
}

// string file_name = 3;
inline void fileMetaData::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fileMetaData::file_name() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.file_name)
  return file_name_.GetNoArena();
}
inline void fileMetaData::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.file_name)
}
#if LANG_CXX11
inline void fileMetaData::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.fileMetaData.file_name)
}
#endif
inline void fileMetaData::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.fileMetaData.file_name)
}
inline void fileMetaData::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.fileMetaData.file_name)
}
inline ::std::string* fileMetaData::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.fileMetaData.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileMetaData::release_file_name() {
  // @@protoc_insertion_point(field_release:bigtable.fileMetaData.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileMetaData::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:bigtable.fileMetaData.file_name)
}

// string file_type = 4;
inline void fileMetaData::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fileMetaData::file_type() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.file_type)
  return file_type_.GetNoArena();
}
inline void fileMetaData::set_file_type(const ::std::string& value) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.file_type)
}
#if LANG_CXX11
inline void fileMetaData::set_file_type(::std::string&& value) {
  
  file_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.fileMetaData.file_type)
}
#endif
inline void fileMetaData::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.fileMetaData.file_type)
}
inline void fileMetaData::set_file_type(const char* value, size_t size) {
  
  file_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.fileMetaData.file_type)
}
inline ::std::string* fileMetaData::mutable_file_type() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.fileMetaData.file_type)
  return file_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileMetaData::release_file_type() {
  // @@protoc_insertion_point(field_release:bigtable.fileMetaData.file_type)
  
  return file_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileMetaData::set_allocated_file_type(::std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:bigtable.fileMetaData.file_type)
}

// string file_from = 5;
inline void fileMetaData::clear_file_from() {
  file_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fileMetaData::file_from() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.file_from)
  return file_from_.GetNoArena();
}
inline void fileMetaData::set_file_from(const ::std::string& value) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.file_from)
}
#if LANG_CXX11
inline void fileMetaData::set_file_from(::std::string&& value) {
  
  file_from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.fileMetaData.file_from)
}
#endif
inline void fileMetaData::set_file_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.fileMetaData.file_from)
}
inline void fileMetaData::set_file_from(const char* value, size_t size) {
  
  file_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.fileMetaData.file_from)
}
inline ::std::string* fileMetaData::mutable_file_from() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.fileMetaData.file_from)
  return file_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileMetaData::release_file_from() {
  // @@protoc_insertion_point(field_release:bigtable.fileMetaData.file_from)
  
  return file_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileMetaData::set_allocated_file_from(::std::string* file_from) {
  if (file_from != nullptr) {
    
  } else {
    
  }
  file_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_from);
  // @@protoc_insertion_point(field_set_allocated:bigtable.fileMetaData.file_from)
}

// string file_id = 6;
inline void fileMetaData::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& fileMetaData::file_id() const {
  // @@protoc_insertion_point(field_get:bigtable.fileMetaData.file_id)
  return file_id_.GetNoArena();
}
inline void fileMetaData::set_file_id(const ::std::string& value) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.fileMetaData.file_id)
}
#if LANG_CXX11
inline void fileMetaData::set_file_id(::std::string&& value) {
  
  file_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.fileMetaData.file_id)
}
#endif
inline void fileMetaData::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.fileMetaData.file_id)
}
inline void fileMetaData::set_file_id(const char* value, size_t size) {
  
  file_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.fileMetaData.file_id)
}
inline ::std::string* fileMetaData::mutable_file_id() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.fileMetaData.file_id)
  return file_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* fileMetaData::release_file_id() {
  // @@protoc_insertion_point(field_release:bigtable.fileMetaData.file_id)
  
  return file_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void fileMetaData::set_allocated_file_id(::std::string* file_id) {
  if (file_id != nullptr) {
    
  } else {
    
  }
  file_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:bigtable.fileMetaData.file_id)
}

// -------------------------------------------------------------------

// GetEmailListRequest

// string row = 1;
inline void GetEmailListRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetEmailListRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.GetEmailListRequest.row)
  return row_.GetNoArena();
}
inline void GetEmailListRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.GetEmailListRequest.row)
}
#if LANG_CXX11
inline void GetEmailListRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.GetEmailListRequest.row)
}
#endif
inline void GetEmailListRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.GetEmailListRequest.row)
}
inline void GetEmailListRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.GetEmailListRequest.row)
}
inline ::std::string* GetEmailListRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.GetEmailListRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetEmailListRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.GetEmailListRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetEmailListRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.GetEmailListRequest.row)
}

// -------------------------------------------------------------------

// GetEmailListReply

// repeated .bigtable.fileMetaData metadata = 1;
inline int GetEmailListReply::metadata_size() const {
  return metadata_.size();
}
inline void GetEmailListReply::clear_metadata() {
  metadata_.Clear();
}
inline ::bigtable::fileMetaData* GetEmailListReply::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:bigtable.GetEmailListReply.metadata)
  return metadata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >*
GetEmailListReply::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:bigtable.GetEmailListReply.metadata)
  return &metadata_;
}
inline const ::bigtable::fileMetaData& GetEmailListReply::metadata(int index) const {
  // @@protoc_insertion_point(field_get:bigtable.GetEmailListReply.metadata)
  return metadata_.Get(index);
}
inline ::bigtable::fileMetaData* GetEmailListReply::add_metadata() {
  // @@protoc_insertion_point(field_add:bigtable.GetEmailListReply.metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >&
GetEmailListReply::metadata() const {
  // @@protoc_insertion_point(field_list:bigtable.GetEmailListReply.metadata)
  return metadata_;
}

// -------------------------------------------------------------------

// GetFileListRequest

// string row = 1;
inline void GetFileListRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileListRequest::row() const {
  // @@protoc_insertion_point(field_get:bigtable.GetFileListRequest.row)
  return row_.GetNoArena();
}
inline void GetFileListRequest::set_row(const ::std::string& value) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bigtable.GetFileListRequest.row)
}
#if LANG_CXX11
inline void GetFileListRequest::set_row(::std::string&& value) {
  
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bigtable.GetFileListRequest.row)
}
#endif
inline void GetFileListRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bigtable.GetFileListRequest.row)
}
inline void GetFileListRequest::set_row(const char* value, size_t size) {
  
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bigtable.GetFileListRequest.row)
}
inline ::std::string* GetFileListRequest::mutable_row() {
  
  // @@protoc_insertion_point(field_mutable:bigtable.GetFileListRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileListRequest::release_row() {
  // @@protoc_insertion_point(field_release:bigtable.GetFileListRequest.row)
  
  return row_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileListRequest::set_allocated_row(::std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:bigtable.GetFileListRequest.row)
}

// -------------------------------------------------------------------

// GetFileListReply

// repeated .bigtable.fileMetaData metadata = 1;
inline int GetFileListReply::metadata_size() const {
  return metadata_.size();
}
inline void GetFileListReply::clear_metadata() {
  metadata_.Clear();
}
inline ::bigtable::fileMetaData* GetFileListReply::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:bigtable.GetFileListReply.metadata)
  return metadata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >*
GetFileListReply::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:bigtable.GetFileListReply.metadata)
  return &metadata_;
}
inline const ::bigtable::fileMetaData& GetFileListReply::metadata(int index) const {
  // @@protoc_insertion_point(field_get:bigtable.GetFileListReply.metadata)
  return metadata_.Get(index);
}
inline ::bigtable::fileMetaData* GetFileListReply::add_metadata() {
  // @@protoc_insertion_point(field_add:bigtable.GetFileListReply.metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bigtable::fileMetaData >&
GetFileListReply::metadata() const {
  // @@protoc_insertion_point(field_list:bigtable.GetFileListReply.metadata)
  return metadata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bigtable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_bigtable_2eproto
