// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtable.proto

#include "bigtable.pb.h"
#include "bigtable.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bigtable {

static const char* Bigtable_method_names[] = {
  "/bigtable.Bigtable/put",
  "/bigtable.Bigtable/get",
  "/bigtable.Bigtable/cput",
  "/bigtable.Bigtable/table_delete",
  "/bigtable.Bigtable/list_all_emails_for_currUser",
  "/bigtable.Bigtable/list_all_files_for_currUser",
};

std::unique_ptr< Bigtable::Stub> Bigtable::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bigtable::Stub> stub(new Bigtable::Stub(channel));
  return stub;
}

Bigtable::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_put_(Bigtable_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_(Bigtable_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cput_(Bigtable_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_table_delete_(Bigtable_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_all_emails_for_currUser_(Bigtable_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_all_files_for_currUser_(Bigtable_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Bigtable::Stub::put(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::bigtable::PutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_put_, context, request, response);
}

void Bigtable::Stub::experimental_async::put(::grpc::ClientContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* Bigtable::Stub::AsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::PutReply>::Create(channel_.get(), cq, rpcmethod_put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* Bigtable::Stub::PrepareAsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::PutReply>::Create(channel_.get(), cq, rpcmethod_put_, context, request, false);
}

::grpc::Status Bigtable::Stub::get(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::bigtable::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_, context, request, response);
}

void Bigtable::Stub::experimental_async::get(::grpc::ClientContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* Bigtable::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetReply>::Create(channel_.get(), cq, rpcmethod_get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* Bigtable::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetReply>::Create(channel_.get(), cq, rpcmethod_get_, context, request, false);
}

::grpc::Status Bigtable::Stub::cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::bigtable::CPutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_cput_, context, request, response);
}

void Bigtable::Stub::experimental_async::cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_cput_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::cput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_cput_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* Bigtable::Stub::AsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::CPutReply>::Create(channel_.get(), cq, rpcmethod_cput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* Bigtable::Stub::PrepareAsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::CPutReply>::Create(channel_.get(), cq, rpcmethod_cput_, context, request, false);
}

::grpc::Status Bigtable::Stub::table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::bigtable::DelReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_table_delete_, context, request, response);
}

void Bigtable::Stub::experimental_async::table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_table_delete_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::table_delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_table_delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* Bigtable::Stub::Asynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::DelReply>::Create(channel_.get(), cq, rpcmethod_table_delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* Bigtable::Stub::PrepareAsynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::DelReply>::Create(channel_.get(), cq, rpcmethod_table_delete_, context, request, false);
}

::grpc::Status Bigtable::Stub::list_all_emails_for_currUser(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::bigtable::GetEmailListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_all_emails_for_currUser_, context, request, response);
}

void Bigtable::Stub::experimental_async::list_all_emails_for_currUser(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_emails_for_currUser_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::list_all_emails_for_currUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_emails_for_currUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* Bigtable::Stub::Asynclist_all_emails_for_currUserRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetEmailListReply>::Create(channel_.get(), cq, rpcmethod_list_all_emails_for_currUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* Bigtable::Stub::PrepareAsynclist_all_emails_for_currUserRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetEmailListReply>::Create(channel_.get(), cq, rpcmethod_list_all_emails_for_currUser_, context, request, false);
}

::grpc::Status Bigtable::Stub::list_all_files_for_currUser(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::bigtable::GetFileListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_all_files_for_currUser_, context, request, response);
}

void Bigtable::Stub::experimental_async::list_all_files_for_currUser(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_files_for_currUser_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::list_all_files_for_currUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_files_for_currUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* Bigtable::Stub::Asynclist_all_files_for_currUserRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetFileListReply>::Create(channel_.get(), cq, rpcmethod_list_all_files_for_currUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* Bigtable::Stub::PrepareAsynclist_all_files_for_currUserRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetFileListReply>::Create(channel_.get(), cq, rpcmethod_list_all_files_for_currUser_, context, request, false);
}

Bigtable::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::PutRequest, ::bigtable::PutReply>(
          std::mem_fn(&Bigtable::Service::put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetRequest, ::bigtable::GetReply>(
          std::mem_fn(&Bigtable::Service::get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::CPutRequest, ::bigtable::CPutReply>(
          std::mem_fn(&Bigtable::Service::cput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::DelRequest, ::bigtable::DelReply>(
          std::mem_fn(&Bigtable::Service::table_delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetEmailListRequest, ::bigtable::GetEmailListReply>(
          std::mem_fn(&Bigtable::Service::list_all_emails_for_currUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetFileListRequest, ::bigtable::GetFileListReply>(
          std::mem_fn(&Bigtable::Service::list_all_files_for_currUser), this)));
}

Bigtable::Service::~Service() {
}

::grpc::Status Bigtable::Service::put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::list_all_emails_for_currUser(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::list_all_files_for_currUser(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bigtable

