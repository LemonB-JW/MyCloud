// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtable.proto

#include "bigtable.pb.h"
#include "bigtable.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bigtable {

static const char* Bigtable_method_names[] = {
  "/bigtable.Bigtable/put",
  "/bigtable.Bigtable/get",
  "/bigtable.Bigtable/cput",
  "/bigtable.Bigtable/table_delete",
  "/bigtable.Bigtable/list_all_emails",
  "/bigtable.Bigtable/list_all_files",
  "/bigtable.Bigtable/rename_file_folder",
  "/bigtable.Bigtable/move_file_folder",
  "/bigtable.Bigtable/localPut_with_fileid",
};

std::unique_ptr< Bigtable::Stub> Bigtable::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bigtable::Stub> stub(new Bigtable::Stub(channel));
  return stub;
}

Bigtable::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_put_(Bigtable_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_(Bigtable_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cput_(Bigtable_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_table_delete_(Bigtable_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_all_emails_(Bigtable_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_list_all_files_(Bigtable_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_rename_file_folder_(Bigtable_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_move_file_folder_(Bigtable_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_localPut_with_fileid_(Bigtable_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Bigtable::Stub::put(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::bigtable::PutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_put_, context, request, response);
}

void Bigtable::Stub::experimental_async::put(::grpc::ClientContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_put_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* Bigtable::Stub::AsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::PutReply>::Create(channel_.get(), cq, rpcmethod_put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* Bigtable::Stub::PrepareAsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::PutReply>::Create(channel_.get(), cq, rpcmethod_put_, context, request, false);
}

::grpc::Status Bigtable::Stub::get(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::bigtable::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_get_, context, request, response);
}

void Bigtable::Stub::experimental_async::get(::grpc::ClientContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* Bigtable::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetReply>::Create(channel_.get(), cq, rpcmethod_get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* Bigtable::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetReply>::Create(channel_.get(), cq, rpcmethod_get_, context, request, false);
}

::grpc::Status Bigtable::Stub::cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::bigtable::CPutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_cput_, context, request, response);
}

void Bigtable::Stub::experimental_async::cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_cput_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::cput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_cput_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* Bigtable::Stub::AsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::CPutReply>::Create(channel_.get(), cq, rpcmethod_cput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* Bigtable::Stub::PrepareAsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::CPutReply>::Create(channel_.get(), cq, rpcmethod_cput_, context, request, false);
}

::grpc::Status Bigtable::Stub::table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::bigtable::DelReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_table_delete_, context, request, response);
}

void Bigtable::Stub::experimental_async::table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_table_delete_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::table_delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_table_delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* Bigtable::Stub::Asynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::DelReply>::Create(channel_.get(), cq, rpcmethod_table_delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* Bigtable::Stub::PrepareAsynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::DelReply>::Create(channel_.get(), cq, rpcmethod_table_delete_, context, request, false);
}

::grpc::Status Bigtable::Stub::list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::bigtable::GetEmailListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_all_emails_, context, request, response);
}

void Bigtable::Stub::experimental_async::list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_emails_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::list_all_emails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_emails_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* Bigtable::Stub::Asynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetEmailListReply>::Create(channel_.get(), cq, rpcmethod_list_all_emails_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* Bigtable::Stub::PrepareAsynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetEmailListReply>::Create(channel_.get(), cq, rpcmethod_list_all_emails_, context, request, false);
}

::grpc::Status Bigtable::Stub::list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::bigtable::GetFileListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_list_all_files_, context, request, response);
}

void Bigtable::Stub::experimental_async::list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_files_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::list_all_files(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_list_all_files_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* Bigtable::Stub::Asynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetFileListReply>::Create(channel_.get(), cq, rpcmethod_list_all_files_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* Bigtable::Stub::PrepareAsynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::GetFileListReply>::Create(channel_.get(), cq, rpcmethod_list_all_files_, context, request, false);
}

::grpc::Status Bigtable::Stub::rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::bigtable::RenameFifoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_rename_file_folder_, context, request, response);
}

void Bigtable::Stub::experimental_async::rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_rename_file_folder_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::rename_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_rename_file_folder_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>* Bigtable::Stub::Asyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::RenameFifoReply>::Create(channel_.get(), cq, rpcmethod_rename_file_folder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>* Bigtable::Stub::PrepareAsyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::RenameFifoReply>::Create(channel_.get(), cq, rpcmethod_rename_file_folder_, context, request, false);
}

::grpc::Status Bigtable::Stub::move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::bigtable::MoveFifoReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_move_file_folder_, context, request, response);
}

void Bigtable::Stub::experimental_async::move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_file_folder_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::move_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_file_folder_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>* Bigtable::Stub::Asyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::MoveFifoReply>::Create(channel_.get(), cq, rpcmethod_move_file_folder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>* Bigtable::Stub::PrepareAsyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::MoveFifoReply>::Create(channel_.get(), cq, rpcmethod_move_file_folder_, context, request, false);
}

::grpc::Status Bigtable::Stub::localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::bigtable::LocalPutWithIDReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_localPut_with_fileid_, context, request, response);
}

void Bigtable::Stub::experimental_async::localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_localPut_with_fileid_, context, request, response, std::move(f));
}

void Bigtable::Stub::experimental_async::localPut_with_fileid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_localPut_with_fileid_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>* Bigtable::Stub::AsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::LocalPutWithIDReply>::Create(channel_.get(), cq, rpcmethod_localPut_with_fileid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>* Bigtable::Stub::PrepareAsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bigtable::LocalPutWithIDReply>::Create(channel_.get(), cq, rpcmethod_localPut_with_fileid_, context, request, false);
}

Bigtable::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::PutRequest, ::bigtable::PutReply>(
          std::mem_fn(&Bigtable::Service::put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetRequest, ::bigtable::GetReply>(
          std::mem_fn(&Bigtable::Service::get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::CPutRequest, ::bigtable::CPutReply>(
          std::mem_fn(&Bigtable::Service::cput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::DelRequest, ::bigtable::DelReply>(
          std::mem_fn(&Bigtable::Service::table_delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetEmailListRequest, ::bigtable::GetEmailListReply>(
          std::mem_fn(&Bigtable::Service::list_all_emails), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::GetFileListRequest, ::bigtable::GetFileListReply>(
          std::mem_fn(&Bigtable::Service::list_all_files), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::RenameFifoRequest, ::bigtable::RenameFifoReply>(
          std::mem_fn(&Bigtable::Service::rename_file_folder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::MoveFifoRequest, ::bigtable::MoveFifoReply>(
          std::mem_fn(&Bigtable::Service::move_file_folder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bigtable_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bigtable::Service, ::bigtable::LocalPutWithIDRequest, ::bigtable::LocalPutWithIDReply>(
          std::mem_fn(&Bigtable::Service::localPut_with_fileid), this)));
}

Bigtable::Service::~Service() {
}

::grpc::Status Bigtable::Service::put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bigtable::Service::localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bigtable

