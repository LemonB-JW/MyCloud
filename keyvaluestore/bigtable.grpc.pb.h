// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtable.proto
// Original file comments:
// Author: Jiaying Guo
//
#ifndef GRPC_bigtable_2eproto__INCLUDED
#define GRPC_bigtable_2eproto__INCLUDED

#include "bigtable.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bigtable {

// The bigtable service definition.
class Bigtable final {
 public:
  static constexpr char const* service_full_name() {
    return "bigtable.Bigtable";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // put operation
    virtual ::grpc::Status put(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::bigtable::PutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>> Asyncput(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>>(AsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>> PrepareAsyncput(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>>(PrepareAsyncputRaw(context, request, cq));
    }
    // get operation
    virtual ::grpc::Status get(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::bigtable::GetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>> Asyncget(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>>(PrepareAsyncgetRaw(context, request, cq));
    }
    // cput operation
    virtual ::grpc::Status cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::bigtable::CPutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>> Asynccput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>>(AsynccputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>> PrepareAsynccput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>>(PrepareAsynccputRaw(context, request, cq));
    }
    // delete operation
    virtual ::grpc::Status table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::bigtable::DelReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>> Asynctable_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>>(Asynctable_deleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>> PrepareAsynctable_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>>(PrepareAsynctable_deleteRaw(context, request, cq));
    }
    // getEmailList operation
    virtual ::grpc::Status list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::bigtable::GetEmailListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>> Asynclist_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>>(Asynclist_all_emailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>> PrepareAsynclist_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>>(PrepareAsynclist_all_emailsRaw(context, request, cq));
    }
    // getFileList operation
    virtual ::grpc::Status list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::bigtable::GetFileListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>> Asynclist_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>>(Asynclist_all_filesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>> PrepareAsynclist_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>>(PrepareAsynclist_all_filesRaw(context, request, cq));
    }
    // rename file/folder
    virtual ::grpc::Status rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::bigtable::RenameFifoReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>> Asyncrename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>>(Asyncrename_file_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>> PrepareAsyncrename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>>(PrepareAsyncrename_file_folderRaw(context, request, cq));
    }
    // move file/folder
    virtual ::grpc::Status move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::bigtable::MoveFifoReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>> Asyncmove_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>>(Asyncmove_file_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>> PrepareAsyncmove_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>>(PrepareAsyncmove_file_folderRaw(context, request, cq));
    }
    // localPut with fileID operation
    virtual ::grpc::Status localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::bigtable::LocalPutWithIDReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>> AsynclocalPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>>(AsynclocalPut_with_fileidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>> PrepareAsynclocalPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>>(PrepareAsynclocalPut_with_fileidRaw(context, request, cq));
    }
    virtual ::grpc::Status localCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::bigtable::LocalCPutReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>> AsynclocalCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>>(AsynclocalCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>> PrepareAsynclocalCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>>(PrepareAsynclocalCPutRaw(context, request, cq));
    }
    virtual ::grpc::Status localDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::bigtable::LocalDelReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>> AsynclocalDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>>(AsynclocalDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>> PrepareAsynclocalDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>>(PrepareAsynclocalDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status localRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::bigtable::LocalRenameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>> AsynclocalRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>>(AsynclocalRenameFifoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>> PrepareAsynclocalRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>>(PrepareAsynclocalRenameFifoRaw(context, request, cq));
    }
    virtual ::grpc::Status localMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::bigtable::LocalMoveReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>> AsynclocalMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>>(AsynclocalMoveFifoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>> PrepareAsynclocalMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>>(PrepareAsynclocalMoveFifoRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // put operation
      virtual void put(::grpc::ClientContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)>) = 0;
      // get operation
      virtual void get(::grpc::ClientContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      // cput operation
      virtual void cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void cput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)>) = 0;
      // delete operation
      virtual void table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void table_delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)>) = 0;
      // getEmailList operation
      virtual void list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_all_emails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)>) = 0;
      // getFileList operation
      virtual void list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_all_files(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)>) = 0;
      // rename file/folder
      virtual void rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rename_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)>) = 0;
      // move file/folder
      virtual void move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void move_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)>) = 0;
      // localPut with fileID operation
      virtual void localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localPut_with_fileid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localCPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalCPutReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalDelReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localRenameFifo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalRenameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void localMoveFifo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalMoveReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>* AsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::PutReply>* PrepareAsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>* AsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::CPutReply>* PrepareAsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>* Asynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::DelReply>* PrepareAsynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>* Asynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetEmailListReply>* PrepareAsynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>* Asynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::GetFileListReply>* PrepareAsynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>* Asyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::RenameFifoReply>* PrepareAsyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>* Asyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::MoveFifoReply>* PrepareAsyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>* AsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalPutWithIDReply>* PrepareAsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>* AsynclocalCPutRaw(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalCPutReply>* PrepareAsynclocalCPutRaw(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>* AsynclocalDeleteRaw(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalDelReply>* PrepareAsynclocalDeleteRaw(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>* AsynclocalRenameFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalRenameReply>* PrepareAsynclocalRenameFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>* AsynclocalMoveFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bigtable::LocalMoveReply>* PrepareAsynclocalMoveFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status put(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::bigtable::PutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>> Asyncput(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>>(AsyncputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>> PrepareAsyncput(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>>(PrepareAsyncputRaw(context, request, cq));
    }
    ::grpc::Status get(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::bigtable::GetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>> Asyncget(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>> PrepareAsyncget(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>>(PrepareAsyncgetRaw(context, request, cq));
    }
    ::grpc::Status cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::bigtable::CPutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>> Asynccput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>>(AsynccputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>> PrepareAsynccput(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>>(PrepareAsynccputRaw(context, request, cq));
    }
    ::grpc::Status table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::bigtable::DelReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>> Asynctable_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>>(Asynctable_deleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>> PrepareAsynctable_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>>(PrepareAsynctable_deleteRaw(context, request, cq));
    }
    ::grpc::Status list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::bigtable::GetEmailListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>> Asynclist_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>>(Asynclist_all_emailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>> PrepareAsynclist_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>>(PrepareAsynclist_all_emailsRaw(context, request, cq));
    }
    ::grpc::Status list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::bigtable::GetFileListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>> Asynclist_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>>(Asynclist_all_filesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>> PrepareAsynclist_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>>(PrepareAsynclist_all_filesRaw(context, request, cq));
    }
    ::grpc::Status rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::bigtable::RenameFifoReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>> Asyncrename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>>(Asyncrename_file_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>> PrepareAsyncrename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>>(PrepareAsyncrename_file_folderRaw(context, request, cq));
    }
    ::grpc::Status move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::bigtable::MoveFifoReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>> Asyncmove_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>>(Asyncmove_file_folderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>> PrepareAsyncmove_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>>(PrepareAsyncmove_file_folderRaw(context, request, cq));
    }
    ::grpc::Status localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::bigtable::LocalPutWithIDReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>> AsynclocalPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>>(AsynclocalPut_with_fileidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>> PrepareAsynclocalPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>>(PrepareAsynclocalPut_with_fileidRaw(context, request, cq));
    }
    ::grpc::Status localCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::bigtable::LocalCPutReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>> AsynclocalCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>>(AsynclocalCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>> PrepareAsynclocalCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>>(PrepareAsynclocalCPutRaw(context, request, cq));
    }
    ::grpc::Status localDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::bigtable::LocalDelReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>> AsynclocalDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>>(AsynclocalDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>> PrepareAsynclocalDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>>(PrepareAsynclocalDeleteRaw(context, request, cq));
    }
    ::grpc::Status localRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::bigtable::LocalRenameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>> AsynclocalRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>>(AsynclocalRenameFifoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>> PrepareAsynclocalRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>>(PrepareAsynclocalRenameFifoRaw(context, request, cq));
    }
    ::grpc::Status localMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::bigtable::LocalMoveReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>> AsynclocalMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>>(AsynclocalMoveFifoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>> PrepareAsynclocalMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>>(PrepareAsynclocalMoveFifoRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void put(::grpc::ClientContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)>) override;
      void put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::PutReply* response, std::function<void(::grpc::Status)>) override;
      void get(::grpc::ClientContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)>) override;
      void get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetReply* response, std::function<void(::grpc::Status)>) override;
      void cput(::grpc::ClientContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)>) override;
      void cput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::CPutReply* response, std::function<void(::grpc::Status)>) override;
      void table_delete(::grpc::ClientContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)>) override;
      void table_delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::DelReply* response, std::function<void(::grpc::Status)>) override;
      void list_all_emails(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)>) override;
      void list_all_emails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetEmailListReply* response, std::function<void(::grpc::Status)>) override;
      void list_all_files(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)>) override;
      void list_all_files(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::GetFileListReply* response, std::function<void(::grpc::Status)>) override;
      void rename_file_folder(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)>) override;
      void rename_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::RenameFifoReply* response, std::function<void(::grpc::Status)>) override;
      void move_file_folder(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)>) override;
      void move_file_folder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::MoveFifoReply* response, std::function<void(::grpc::Status)>) override;
      void localPut_with_fileid(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)>) override;
      void localPut_with_fileid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalPutWithIDReply* response, std::function<void(::grpc::Status)>) override;
      void localCPut(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response, std::function<void(::grpc::Status)>) override;
      void localCPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalCPutReply* response, std::function<void(::grpc::Status)>) override;
      void localDelete(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response, std::function<void(::grpc::Status)>) override;
      void localDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalDelReply* response, std::function<void(::grpc::Status)>) override;
      void localRenameFifo(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response, std::function<void(::grpc::Status)>) override;
      void localRenameFifo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalRenameReply* response, std::function<void(::grpc::Status)>) override;
      void localMoveFifo(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response, std::function<void(::grpc::Status)>) override;
      void localMoveFifo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bigtable::LocalMoveReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* AsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::PutReply>* PrepareAsyncputRaw(::grpc::ClientContext* context, const ::bigtable::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* AsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetReply>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::bigtable::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* AsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::CPutReply>* PrepareAsynccputRaw(::grpc::ClientContext* context, const ::bigtable::CPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* Asynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::DelReply>* PrepareAsynctable_deleteRaw(::grpc::ClientContext* context, const ::bigtable::DelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* Asynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetEmailListReply>* PrepareAsynclist_all_emailsRaw(::grpc::ClientContext* context, const ::bigtable::GetEmailListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* Asynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::GetFileListReply>* PrepareAsynclist_all_filesRaw(::grpc::ClientContext* context, const ::bigtable::GetFileListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>* Asyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::RenameFifoReply>* PrepareAsyncrename_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::RenameFifoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>* Asyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::MoveFifoReply>* PrepareAsyncmove_file_folderRaw(::grpc::ClientContext* context, const ::bigtable::MoveFifoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>* AsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalPutWithIDReply>* PrepareAsynclocalPut_with_fileidRaw(::grpc::ClientContext* context, const ::bigtable::LocalPutWithIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>* AsynclocalCPutRaw(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalCPutReply>* PrepareAsynclocalCPutRaw(::grpc::ClientContext* context, const ::bigtable::LocalCPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>* AsynclocalDeleteRaw(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalDelReply>* PrepareAsynclocalDeleteRaw(::grpc::ClientContext* context, const ::bigtable::LocalDelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>* AsynclocalRenameFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalRenameReply>* PrepareAsynclocalRenameFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalRenameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>* AsynclocalMoveFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bigtable::LocalMoveReply>* PrepareAsynclocalMoveFifoRaw(::grpc::ClientContext* context, const ::bigtable::LocalMoveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_put_;
    const ::grpc::internal::RpcMethod rpcmethod_get_;
    const ::grpc::internal::RpcMethod rpcmethod_cput_;
    const ::grpc::internal::RpcMethod rpcmethod_table_delete_;
    const ::grpc::internal::RpcMethod rpcmethod_list_all_emails_;
    const ::grpc::internal::RpcMethod rpcmethod_list_all_files_;
    const ::grpc::internal::RpcMethod rpcmethod_rename_file_folder_;
    const ::grpc::internal::RpcMethod rpcmethod_move_file_folder_;
    const ::grpc::internal::RpcMethod rpcmethod_localPut_with_fileid_;
    const ::grpc::internal::RpcMethod rpcmethod_localCPut_;
    const ::grpc::internal::RpcMethod rpcmethod_localDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_localRenameFifo_;
    const ::grpc::internal::RpcMethod rpcmethod_localMoveFifo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // put operation
    virtual ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response);
    // get operation
    virtual ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response);
    // cput operation
    virtual ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response);
    // delete operation
    virtual ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response);
    // getEmailList operation
    virtual ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response);
    // getFileList operation
    virtual ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response);
    // rename file/folder
    virtual ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response);
    // move file/folder
    virtual ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response);
    // localPut with fileID operation
    virtual ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response);
    virtual ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response);
    virtual ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response);
    virtual ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response);
    virtual ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestput(::grpc::ServerContext* context, ::bigtable::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::PutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::bigtable::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::GetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_cput() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcput(::grpc::ServerContext* context, ::bigtable::CPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::CPutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_table_delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttable_delete(::grpc::ServerContext* context, ::bigtable::DelRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::DelReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_list_all_emails() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_all_emails(::grpc::ServerContext* context, ::bigtable::GetEmailListRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::GetEmailListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_list_all_files() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_all_files(::grpc::ServerContext* context, ::bigtable::GetFileListRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::GetFileListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_rename_file_folder() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrename_file_folder(::grpc::ServerContext* context, ::bigtable::RenameFifoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::RenameFifoReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_move_file_folder() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove_file_folder(::grpc::ServerContext* context, ::bigtable::MoveFifoRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::MoveFifoReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_localPut_with_fileid() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalPut_with_fileid(::grpc::ServerContext* context, ::bigtable::LocalPutWithIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::LocalPutWithIDReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_localCPut() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalCPut(::grpc::ServerContext* context, ::bigtable::LocalCPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::LocalCPutReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_localDelete() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalDelete(::grpc::ServerContext* context, ::bigtable::LocalDelRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::LocalDelReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_localRenameFifo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalRenameFifo(::grpc::ServerContext* context, ::bigtable::LocalRenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::LocalRenameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_localMoveFifo() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalMoveFifo(::grpc::ServerContext* context, ::bigtable::LocalMoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::bigtable::LocalMoveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_put<WithAsyncMethod_get<WithAsyncMethod_cput<WithAsyncMethod_table_delete<WithAsyncMethod_list_all_emails<WithAsyncMethod_list_all_files<WithAsyncMethod_rename_file_folder<WithAsyncMethod_move_file_folder<WithAsyncMethod_localPut_with_fileid<WithAsyncMethod_localCPut<WithAsyncMethod_localDelete<WithAsyncMethod_localRenameFifo<WithAsyncMethod_localMoveFifo<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_put() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::PutRequest, ::bigtable::PutReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::PutRequest* request,
                 ::bigtable::PutReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->put(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::GetRequest, ::bigtable::GetReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::GetRequest* request,
                 ::bigtable::GetReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_cput() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::CPutRequest, ::bigtable::CPutReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::CPutRequest* request,
                 ::bigtable::CPutReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->cput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_table_delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::DelRequest, ::bigtable::DelReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::DelRequest* request,
                 ::bigtable::DelReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->table_delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_list_all_emails() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::GetEmailListRequest, ::bigtable::GetEmailListReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::GetEmailListRequest* request,
                 ::bigtable::GetEmailListReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->list_all_emails(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_list_all_files() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::GetFileListRequest, ::bigtable::GetFileListReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::GetFileListRequest* request,
                 ::bigtable::GetFileListReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->list_all_files(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_rename_file_folder() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::RenameFifoRequest, ::bigtable::RenameFifoReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::RenameFifoRequest* request,
                 ::bigtable::RenameFifoReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->rename_file_folder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_move_file_folder() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::MoveFifoRequest, ::bigtable::MoveFifoReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::MoveFifoRequest* request,
                 ::bigtable::MoveFifoReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->move_file_folder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_localPut_with_fileid() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::LocalPutWithIDRequest, ::bigtable::LocalPutWithIDReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::LocalPutWithIDRequest* request,
                 ::bigtable::LocalPutWithIDReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->localPut_with_fileid(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_localCPut() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::LocalCPutRequest, ::bigtable::LocalCPutReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::LocalCPutRequest* request,
                 ::bigtable::LocalCPutReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->localCPut(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_localDelete() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::LocalDelRequest, ::bigtable::LocalDelReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::LocalDelRequest* request,
                 ::bigtable::LocalDelReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->localDelete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_localRenameFifo() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::LocalRenameRequest, ::bigtable::LocalRenameReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::LocalRenameRequest* request,
                 ::bigtable::LocalRenameReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->localRenameFifo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_localMoveFifo() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::bigtable::LocalMoveRequest, ::bigtable::LocalMoveReply>(
          [this](::grpc::ServerContext* context,
                 const ::bigtable::LocalMoveRequest* request,
                 ::bigtable::LocalMoveReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->localMoveFifo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_put<ExperimentalWithCallbackMethod_get<ExperimentalWithCallbackMethod_cput<ExperimentalWithCallbackMethod_table_delete<ExperimentalWithCallbackMethod_list_all_emails<ExperimentalWithCallbackMethod_list_all_files<ExperimentalWithCallbackMethod_rename_file_folder<ExperimentalWithCallbackMethod_move_file_folder<ExperimentalWithCallbackMethod_localPut_with_fileid<ExperimentalWithCallbackMethod_localCPut<ExperimentalWithCallbackMethod_localDelete<ExperimentalWithCallbackMethod_localRenameFifo<ExperimentalWithCallbackMethod_localMoveFifo<Service > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_cput() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_table_delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_list_all_emails() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_list_all_files() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_rename_file_folder() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_move_file_folder() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_localPut_with_fileid() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_localCPut() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_localDelete() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_localRenameFifo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_localMoveFifo() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_cput() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_table_delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttable_delete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_list_all_emails() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_all_emails(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_list_all_files() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_all_files(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_rename_file_folder() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrename_file_folder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_move_file_folder() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmove_file_folder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_localPut_with_fileid() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalPut_with_fileid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_localCPut() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalCPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_localDelete() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_localRenameFifo() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalRenameFifo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_localMoveFifo() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlocalMoveFifo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_put() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->put(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void put(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_cput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->cput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void cput(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_table_delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->table_delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void table_delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_list_all_emails() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->list_all_emails(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_all_emails(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_list_all_files() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->list_all_files(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_all_files(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_rename_file_folder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->rename_file_folder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rename_file_folder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_move_file_folder() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->move_file_folder(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void move_file_folder(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_localPut_with_fileid() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->localPut_with_fileid(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localPut_with_fileid(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_localCPut() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->localCPut(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localCPut(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_localDelete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->localDelete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localDelete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_localRenameFifo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->localRenameFifo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localRenameFifo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_localMoveFifo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->localMoveFifo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void localMoveFifo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::PutRequest, ::bigtable::PutReply>(std::bind(&WithStreamedUnaryMethod_put<BaseClass>::Streamedput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status put(::grpc::ServerContext* context, const ::bigtable::PutRequest* request, ::bigtable::PutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::PutRequest,::bigtable::PutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::GetRequest, ::bigtable::GetReply>(std::bind(&WithStreamedUnaryMethod_get<BaseClass>::Streamedget, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get(::grpc::ServerContext* context, const ::bigtable::GetRequest* request, ::bigtable::GetReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::GetRequest,::bigtable::GetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_cput() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::CPutRequest, ::bigtable::CPutReply>(std::bind(&WithStreamedUnaryMethod_cput<BaseClass>::Streamedcput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_cput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cput(::grpc::ServerContext* context, const ::bigtable::CPutRequest* request, ::bigtable::CPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::CPutRequest,::bigtable::CPutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_table_delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_table_delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::DelRequest, ::bigtable::DelReply>(std::bind(&WithStreamedUnaryMethod_table_delete<BaseClass>::Streamedtable_delete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_table_delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status table_delete(::grpc::ServerContext* context, const ::bigtable::DelRequest* request, ::bigtable::DelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtable_delete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::DelRequest,::bigtable::DelReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_all_emails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_list_all_emails() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::GetEmailListRequest, ::bigtable::GetEmailListReply>(std::bind(&WithStreamedUnaryMethod_list_all_emails<BaseClass>::Streamedlist_all_emails, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_list_all_emails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_all_emails(::grpc::ServerContext* context, const ::bigtable::GetEmailListRequest* request, ::bigtable::GetEmailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_all_emails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::GetEmailListRequest,::bigtable::GetEmailListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_all_files : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_list_all_files() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::GetFileListRequest, ::bigtable::GetFileListReply>(std::bind(&WithStreamedUnaryMethod_list_all_files<BaseClass>::Streamedlist_all_files, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_list_all_files() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_all_files(::grpc::ServerContext* context, const ::bigtable::GetFileListRequest* request, ::bigtable::GetFileListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_all_files(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::GetFileListRequest,::bigtable::GetFileListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rename_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_rename_file_folder() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::RenameFifoRequest, ::bigtable::RenameFifoReply>(std::bind(&WithStreamedUnaryMethod_rename_file_folder<BaseClass>::Streamedrename_file_folder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_rename_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rename_file_folder(::grpc::ServerContext* context, const ::bigtable::RenameFifoRequest* request, ::bigtable::RenameFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrename_file_folder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::RenameFifoRequest,::bigtable::RenameFifoReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_move_file_folder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_move_file_folder() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::MoveFifoRequest, ::bigtable::MoveFifoReply>(std::bind(&WithStreamedUnaryMethod_move_file_folder<BaseClass>::Streamedmove_file_folder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_move_file_folder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status move_file_folder(::grpc::ServerContext* context, const ::bigtable::MoveFifoRequest* request, ::bigtable::MoveFifoReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmove_file_folder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::MoveFifoRequest,::bigtable::MoveFifoReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_localPut_with_fileid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_localPut_with_fileid() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::LocalPutWithIDRequest, ::bigtable::LocalPutWithIDReply>(std::bind(&WithStreamedUnaryMethod_localPut_with_fileid<BaseClass>::StreamedlocalPut_with_fileid, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_localPut_with_fileid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status localPut_with_fileid(::grpc::ServerContext* context, const ::bigtable::LocalPutWithIDRequest* request, ::bigtable::LocalPutWithIDReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlocalPut_with_fileid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::LocalPutWithIDRequest,::bigtable::LocalPutWithIDReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_localCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_localCPut() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::LocalCPutRequest, ::bigtable::LocalCPutReply>(std::bind(&WithStreamedUnaryMethod_localCPut<BaseClass>::StreamedlocalCPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_localCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status localCPut(::grpc::ServerContext* context, const ::bigtable::LocalCPutRequest* request, ::bigtable::LocalCPutReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlocalCPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::LocalCPutRequest,::bigtable::LocalCPutReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_localDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_localDelete() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::LocalDelRequest, ::bigtable::LocalDelReply>(std::bind(&WithStreamedUnaryMethod_localDelete<BaseClass>::StreamedlocalDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_localDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status localDelete(::grpc::ServerContext* context, const ::bigtable::LocalDelRequest* request, ::bigtable::LocalDelReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlocalDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::LocalDelRequest,::bigtable::LocalDelReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_localRenameFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_localRenameFifo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::LocalRenameRequest, ::bigtable::LocalRenameReply>(std::bind(&WithStreamedUnaryMethod_localRenameFifo<BaseClass>::StreamedlocalRenameFifo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_localRenameFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status localRenameFifo(::grpc::ServerContext* context, const ::bigtable::LocalRenameRequest* request, ::bigtable::LocalRenameReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlocalRenameFifo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::LocalRenameRequest,::bigtable::LocalRenameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_localMoveFifo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_localMoveFifo() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::bigtable::LocalMoveRequest, ::bigtable::LocalMoveReply>(std::bind(&WithStreamedUnaryMethod_localMoveFifo<BaseClass>::StreamedlocalMoveFifo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_localMoveFifo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status localMoveFifo(::grpc::ServerContext* context, const ::bigtable::LocalMoveRequest* request, ::bigtable::LocalMoveReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlocalMoveFifo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bigtable::LocalMoveRequest,::bigtable::LocalMoveReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_put<WithStreamedUnaryMethod_get<WithStreamedUnaryMethod_cput<WithStreamedUnaryMethod_table_delete<WithStreamedUnaryMethod_list_all_emails<WithStreamedUnaryMethod_list_all_files<WithStreamedUnaryMethod_rename_file_folder<WithStreamedUnaryMethod_move_file_folder<WithStreamedUnaryMethod_localPut_with_fileid<WithStreamedUnaryMethod_localCPut<WithStreamedUnaryMethod_localDelete<WithStreamedUnaryMethod_localRenameFifo<WithStreamedUnaryMethod_localMoveFifo<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_put<WithStreamedUnaryMethod_get<WithStreamedUnaryMethod_cput<WithStreamedUnaryMethod_table_delete<WithStreamedUnaryMethod_list_all_emails<WithStreamedUnaryMethod_list_all_files<WithStreamedUnaryMethod_rename_file_folder<WithStreamedUnaryMethod_move_file_folder<WithStreamedUnaryMethod_localPut_with_fileid<WithStreamedUnaryMethod_localCPut<WithStreamedUnaryMethod_localDelete<WithStreamedUnaryMethod_localRenameFifo<WithStreamedUnaryMethod_localMoveFifo<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace bigtable


#endif  // GRPC_bigtable_2eproto__INCLUDED
