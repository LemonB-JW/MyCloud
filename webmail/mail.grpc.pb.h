// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mail.proto
#ifndef GRPC_mail_2eproto__INCLUDED
#define GRPC_mail_2eproto__INCLUDED

#include "mail.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mail {

class Mail final {
 public:
  static constexpr char const* service_full_name() {
    return "mail.Mail";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::mail::GetMailListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>> AsyncGetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>>(AsyncGetMailListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>> PrepareAsyncGetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>>(PrepareAsyncGetMailListRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::mail::GetMailReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>> AsyncGetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>>(AsyncGetMailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>> PrepareAsyncGetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>>(PrepareAsyncGetMailRaw(context, request, cq));
    }
    virtual ::grpc::Status PutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::mail::PutMailReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>> AsyncPutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>>(AsyncPutMailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>> PrepareAsyncPutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>>(PrepareAsyncPutMailRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMailList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::GetMailListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::GetMailReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PutMail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::PutMailReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>* AsyncGetMailListRaw(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailListReply>* PrepareAsyncGetMailListRaw(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>* AsyncGetMailRaw(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::GetMailReply>* PrepareAsyncGetMailRaw(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>* AsyncPutMailRaw(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mail::PutMailReply>* PrepareAsyncPutMailRaw(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::mail::GetMailListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>> AsyncGetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>>(AsyncGetMailListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>> PrepareAsyncGetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>>(PrepareAsyncGetMailListRaw(context, request, cq));
    }
    ::grpc::Status GetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::mail::GetMailReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>> AsyncGetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>>(AsyncGetMailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>> PrepareAsyncGetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>>(PrepareAsyncGetMailRaw(context, request, cq));
    }
    ::grpc::Status PutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::mail::PutMailReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>> AsyncPutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>>(AsyncPutMailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>> PrepareAsyncPutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>>(PrepareAsyncPutMailRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetMailList(::grpc::ClientContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response, std::function<void(::grpc::Status)>) override;
      void GetMailList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::GetMailListReply* response, std::function<void(::grpc::Status)>) override;
      void GetMail(::grpc::ClientContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response, std::function<void(::grpc::Status)>) override;
      void GetMail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::GetMailReply* response, std::function<void(::grpc::Status)>) override;
      void PutMail(::grpc::ClientContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response, std::function<void(::grpc::Status)>) override;
      void PutMail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mail::PutMailReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>* AsyncGetMailListRaw(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mail::GetMailListReply>* PrepareAsyncGetMailListRaw(::grpc::ClientContext* context, const ::mail::GetMailListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>* AsyncGetMailRaw(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mail::GetMailReply>* PrepareAsyncGetMailRaw(::grpc::ClientContext* context, const ::mail::GetMailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>* AsyncPutMailRaw(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mail::PutMailReply>* PrepareAsyncPutMailRaw(::grpc::ClientContext* context, const ::mail::PutMailRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMailList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMail_;
    const ::grpc::internal::RpcMethod rpcmethod_PutMail_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response);
    virtual ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response);
    virtual ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMailList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMailList(::grpc::ServerContext* context, ::mail::GetMailListRequest* request, ::grpc::ServerAsyncResponseWriter< ::mail::GetMailListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMail() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMail(::grpc::ServerContext* context, ::mail::GetMailRequest* request, ::grpc::ServerAsyncResponseWriter< ::mail::GetMailReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutMail() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutMail(::grpc::ServerContext* context, ::mail::PutMailRequest* request, ::grpc::ServerAsyncResponseWriter< ::mail::PutMailReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMailList<WithAsyncMethod_GetMail<WithAsyncMethod_PutMail<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMailList() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mail::GetMailListRequest, ::mail::GetMailListReply>(
          [this](::grpc::ServerContext* context,
                 const ::mail::GetMailListRequest* request,
                 ::mail::GetMailListReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMailList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMail() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mail::GetMailRequest, ::mail::GetMailReply>(
          [this](::grpc::ServerContext* context,
                 const ::mail::GetMailRequest* request,
                 ::mail::GetMailReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutMail() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::mail::PutMailRequest, ::mail::PutMailReply>(
          [this](::grpc::ServerContext* context,
                 const ::mail::PutMailRequest* request,
                 ::mail::PutMailReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PutMail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetMailList<ExperimentalWithCallbackMethod_GetMail<ExperimentalWithCallbackMethod_PutMail<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMailList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMail() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutMail() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMailList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMailList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMail() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutMail() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutMail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMailList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMailList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMailList(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMail(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutMail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PutMail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PutMail(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMailList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMailList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mail::GetMailListRequest, ::mail::GetMailListReply>(std::bind(&WithStreamedUnaryMethod_GetMailList<BaseClass>::StreamedGetMailList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMailList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMailList(::grpc::ServerContext* context, const ::mail::GetMailListRequest* request, ::mail::GetMailListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMailList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mail::GetMailListRequest,::mail::GetMailListReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMail() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mail::GetMailRequest, ::mail::GetMailReply>(std::bind(&WithStreamedUnaryMethod_GetMail<BaseClass>::StreamedGetMail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMail(::grpc::ServerContext* context, const ::mail::GetMailRequest* request, ::mail::GetMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mail::GetMailRequest,::mail::GetMailReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutMail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutMail() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mail::PutMailRequest, ::mail::PutMailReply>(std::bind(&WithStreamedUnaryMethod_PutMail<BaseClass>::StreamedPutMail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutMail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutMail(::grpc::ServerContext* context, const ::mail::PutMailRequest* request, ::mail::PutMailReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutMail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mail::PutMailRequest,::mail::PutMailReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMailList<WithStreamedUnaryMethod_GetMail<WithStreamedUnaryMethod_PutMail<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMailList<WithStreamedUnaryMethod_GetMail<WithStreamedUnaryMethod_PutMail<Service > > > StreamedService;
};

}  // namespace mail


#endif  // GRPC_mail_2eproto__INCLUDED
