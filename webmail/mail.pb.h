// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#ifndef PROTOBUF_INCLUDED_mail_2eproto
#define PROTOBUF_INCLUDED_mail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mail_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_mail_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_mail_2eproto();
namespace mail {
class Email;
class EmailDefaultTypeInternal;
extern EmailDefaultTypeInternal _Email_default_instance_;
class GetMailListReply;
class GetMailListReplyDefaultTypeInternal;
extern GetMailListReplyDefaultTypeInternal _GetMailListReply_default_instance_;
class GetMailListRequest;
class GetMailListRequestDefaultTypeInternal;
extern GetMailListRequestDefaultTypeInternal _GetMailListRequest_default_instance_;
class GetMailReply;
class GetMailReplyDefaultTypeInternal;
extern GetMailReplyDefaultTypeInternal _GetMailReply_default_instance_;
class GetMailRequest;
class GetMailRequestDefaultTypeInternal;
extern GetMailRequestDefaultTypeInternal _GetMailRequest_default_instance_;
class PutMailReply;
class PutMailReplyDefaultTypeInternal;
extern PutMailReplyDefaultTypeInternal _PutMailReply_default_instance_;
class PutMailRequest;
class PutMailRequestDefaultTypeInternal;
extern PutMailRequestDefaultTypeInternal _PutMailRequest_default_instance_;
}  // namespace mail
namespace google {
namespace protobuf {
template<> ::mail::Email* Arena::CreateMaybeMessage<::mail::Email>(Arena*);
template<> ::mail::GetMailListReply* Arena::CreateMaybeMessage<::mail::GetMailListReply>(Arena*);
template<> ::mail::GetMailListRequest* Arena::CreateMaybeMessage<::mail::GetMailListRequest>(Arena*);
template<> ::mail::GetMailReply* Arena::CreateMaybeMessage<::mail::GetMailReply>(Arena*);
template<> ::mail::GetMailRequest* Arena::CreateMaybeMessage<::mail::GetMailRequest>(Arena*);
template<> ::mail::PutMailReply* Arena::CreateMaybeMessage<::mail::PutMailReply>(Arena*);
template<> ::mail::PutMailRequest* Arena::CreateMaybeMessage<::mail::PutMailRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mail {

// ===================================================================

class GetMailListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.GetMailListRequest) */ {
 public:
  GetMailListRequest();
  virtual ~GetMailListRequest();

  GetMailListRequest(const GetMailListRequest& from);

  inline GetMailListRequest& operator=(const GetMailListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMailListRequest(GetMailListRequest&& from) noexcept
    : GetMailListRequest() {
    *this = ::std::move(from);
  }

  inline GetMailListRequest& operator=(GetMailListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetMailListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMailListRequest* internal_default_instance() {
    return reinterpret_cast<const GetMailListRequest*>(
               &_GetMailListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetMailListRequest* other);
  friend void swap(GetMailListRequest& a, GetMailListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMailListRequest* New() const final {
    return CreateMaybeMessage<GetMailListRequest>(nullptr);
  }

  GetMailListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMailListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMailListRequest& from);
  void MergeFrom(const GetMailListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMailListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:mail.GetMailListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class GetMailListReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.GetMailListReply) */ {
 public:
  GetMailListReply();
  virtual ~GetMailListReply();

  GetMailListReply(const GetMailListReply& from);

  inline GetMailListReply& operator=(const GetMailListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMailListReply(GetMailListReply&& from) noexcept
    : GetMailListReply() {
    *this = ::std::move(from);
  }

  inline GetMailListReply& operator=(GetMailListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetMailListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMailListReply* internal_default_instance() {
    return reinterpret_cast<const GetMailListReply*>(
               &_GetMailListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetMailListReply* other);
  friend void swap(GetMailListReply& a, GetMailListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMailListReply* New() const final {
    return CreateMaybeMessage<GetMailListReply>(nullptr);
  }

  GetMailListReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMailListReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMailListReply& from);
  void MergeFrom(const GetMailListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMailListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mail.Email item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  ::mail::Email* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::mail::Email >*
      mutable_item();
  const ::mail::Email& item(int index) const;
  ::mail::Email* add_item();
  const ::google::protobuf::RepeatedPtrField< ::mail::Email >&
      item() const;

  // @@protoc_insertion_point(class_scope:mail.GetMailListReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mail::Email > item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class Email final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.Email) */ {
 public:
  Email();
  virtual ~Email();

  Email(const Email& from);

  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Email(Email&& from) noexcept
    : Email() {
    *this = ::std::move(from);
  }

  inline Email& operator=(Email&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Email& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Email* internal_default_instance() {
    return reinterpret_cast<const Email*>(
               &_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Email* other);
  friend void swap(Email& a, Email& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Email* New() const final {
    return CreateMaybeMessage<Email>(nullptr);
  }

  Email* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Email>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Email* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string subject = 2;
  void clear_subject();
  static const int kSubjectFieldNumber = 2;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string id = 4;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:mail.Email)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class GetMailRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.GetMailRequest) */ {
 public:
  GetMailRequest();
  virtual ~GetMailRequest();

  GetMailRequest(const GetMailRequest& from);

  inline GetMailRequest& operator=(const GetMailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMailRequest(GetMailRequest&& from) noexcept
    : GetMailRequest() {
    *this = ::std::move(from);
  }

  inline GetMailRequest& operator=(GetMailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetMailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMailRequest* internal_default_instance() {
    return reinterpret_cast<const GetMailRequest*>(
               &_GetMailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetMailRequest* other);
  friend void swap(GetMailRequest& a, GetMailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMailRequest* New() const final {
    return CreateMaybeMessage<GetMailRequest>(nullptr);
  }

  GetMailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMailRequest& from);
  void MergeFrom(const GetMailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string email_id = 2;
  void clear_email_id();
  static const int kEmailIdFieldNumber = 2;
  const ::std::string& email_id() const;
  void set_email_id(const ::std::string& value);
  #if LANG_CXX11
  void set_email_id(::std::string&& value);
  #endif
  void set_email_id(const char* value);
  void set_email_id(const char* value, size_t size);
  ::std::string* mutable_email_id();
  ::std::string* release_email_id();
  void set_allocated_email_id(::std::string* email_id);

  // @@protoc_insertion_point(class_scope:mail.GetMailRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr email_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class GetMailReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.GetMailReply) */ {
 public:
  GetMailReply();
  virtual ~GetMailReply();

  GetMailReply(const GetMailReply& from);

  inline GetMailReply& operator=(const GetMailReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMailReply(GetMailReply&& from) noexcept
    : GetMailReply() {
    *this = ::std::move(from);
  }

  inline GetMailReply& operator=(GetMailReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetMailReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMailReply* internal_default_instance() {
    return reinterpret_cast<const GetMailReply*>(
               &_GetMailReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetMailReply* other);
  friend void swap(GetMailReply& a, GetMailReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMailReply* New() const final {
    return CreateMaybeMessage<GetMailReply>(nullptr);
  }

  GetMailReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMailReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMailReply& from);
  void MergeFrom(const GetMailReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMailReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:mail.GetMailReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class PutMailRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.PutMailRequest) */ {
 public:
  PutMailRequest();
  virtual ~PutMailRequest();

  PutMailRequest(const PutMailRequest& from);

  inline PutMailRequest& operator=(const PutMailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutMailRequest(PutMailRequest&& from) noexcept
    : PutMailRequest() {
    *this = ::std::move(from);
  }

  inline PutMailRequest& operator=(PutMailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PutMailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMailRequest* internal_default_instance() {
    return reinterpret_cast<const PutMailRequest*>(
               &_PutMailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PutMailRequest* other);
  friend void swap(PutMailRequest& a, PutMailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutMailRequest* New() const final {
    return CreateMaybeMessage<PutMailRequest>(nullptr);
  }

  PutMailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutMailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutMailRequest& from);
  void MergeFrom(const PutMailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string receiver = 1;
  void clear_receiver();
  static const int kReceiverFieldNumber = 1;
  const ::std::string& receiver() const;
  void set_receiver(const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(::std::string&& value);
  #endif
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  ::std::string* mutable_receiver();
  ::std::string* release_receiver();
  void set_allocated_receiver(::std::string* receiver);

  // string created_time = 2;
  void clear_created_time();
  static const int kCreatedTimeFieldNumber = 2;
  const ::std::string& created_time() const;
  void set_created_time(const ::std::string& value);
  #if LANG_CXX11
  void set_created_time(::std::string&& value);
  #endif
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  ::std::string* mutable_created_time();
  ::std::string* release_created_time();
  void set_allocated_created_time(::std::string* created_time);

  // string subject = 3;
  void clear_subject();
  static const int kSubjectFieldNumber = 3;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string sender = 4;
  void clear_sender();
  static const int kSenderFieldNumber = 4;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // string content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 size = 6;
  void clear_size();
  static const int kSizeFieldNumber = 6;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mail.PutMailRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr receiver_;
  ::google::protobuf::internal::ArenaStringPtr created_time_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// -------------------------------------------------------------------

class PutMailReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mail.PutMailReply) */ {
 public:
  PutMailReply();
  virtual ~PutMailReply();

  PutMailReply(const PutMailReply& from);

  inline PutMailReply& operator=(const PutMailReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutMailReply(PutMailReply&& from) noexcept
    : PutMailReply() {
    *this = ::std::move(from);
  }

  inline PutMailReply& operator=(PutMailReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PutMailReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutMailReply* internal_default_instance() {
    return reinterpret_cast<const PutMailReply*>(
               &_PutMailReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PutMailReply* other);
  friend void swap(PutMailReply& a, PutMailReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutMailReply* New() const final {
    return CreateMaybeMessage<PutMailReply>(nullptr);
  }

  PutMailReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutMailReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutMailReply& from);
  void MergeFrom(const PutMailReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutMailReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email_id = 1;
  void clear_email_id();
  static const int kEmailIdFieldNumber = 1;
  const ::std::string& email_id() const;
  void set_email_id(const ::std::string& value);
  #if LANG_CXX11
  void set_email_id(::std::string&& value);
  #endif
  void set_email_id(const char* value);
  void set_email_id(const char* value, size_t size);
  ::std::string* mutable_email_id();
  ::std::string* release_email_id();
  void set_allocated_email_id(::std::string* email_id);

  // @@protoc_insertion_point(class_scope:mail.PutMailReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr email_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMailListRequest

// string user = 1;
inline void GetMailListRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMailListRequest::user() const {
  // @@protoc_insertion_point(field_get:mail.GetMailListRequest.user)
  return user_.GetNoArena();
}
inline void GetMailListRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.GetMailListRequest.user)
}
#if LANG_CXX11
inline void GetMailListRequest::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.GetMailListRequest.user)
}
#endif
inline void GetMailListRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.GetMailListRequest.user)
}
inline void GetMailListRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.GetMailListRequest.user)
}
inline ::std::string* GetMailListRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:mail.GetMailListRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMailListRequest::release_user() {
  // @@protoc_insertion_point(field_release:mail.GetMailListRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMailListRequest::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mail.GetMailListRequest.user)
}

// -------------------------------------------------------------------

// GetMailListReply

// repeated .mail.Email item = 1;
inline int GetMailListReply::item_size() const {
  return item_.size();
}
inline void GetMailListReply::clear_item() {
  item_.Clear();
}
inline ::mail::Email* GetMailListReply::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:mail.GetMailListReply.item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mail::Email >*
GetMailListReply::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:mail.GetMailListReply.item)
  return &item_;
}
inline const ::mail::Email& GetMailListReply::item(int index) const {
  // @@protoc_insertion_point(field_get:mail.GetMailListReply.item)
  return item_.Get(index);
}
inline ::mail::Email* GetMailListReply::add_item() {
  // @@protoc_insertion_point(field_add:mail.GetMailListReply.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mail::Email >&
GetMailListReply::item() const {
  // @@protoc_insertion_point(field_list:mail.GetMailListReply.item)
  return item_;
}

// -------------------------------------------------------------------

// Email

// string from = 1;
inline void Email::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::from() const {
  // @@protoc_insertion_point(field_get:mail.Email.from)
  return from_.GetNoArena();
}
inline void Email::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.Email.from)
}
#if LANG_CXX11
inline void Email::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.Email.from)
}
#endif
inline void Email::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.Email.from)
}
inline void Email::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.Email.from)
}
inline ::std::string* Email::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:mail.Email.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_from() {
  // @@protoc_insertion_point(field_release:mail.Email.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_from(::std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:mail.Email.from)
}

// string subject = 2;
inline void Email::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::subject() const {
  // @@protoc_insertion_point(field_get:mail.Email.subject)
  return subject_.GetNoArena();
}
inline void Email::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.Email.subject)
}
#if LANG_CXX11
inline void Email::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.Email.subject)
}
#endif
inline void Email::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.Email.subject)
}
inline void Email::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.Email.subject)
}
inline ::std::string* Email::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:mail.Email.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_subject() {
  // @@protoc_insertion_point(field_release:mail.Email.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_subject(::std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:mail.Email.subject)
}

// string date = 3;
inline void Email::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::date() const {
  // @@protoc_insertion_point(field_get:mail.Email.date)
  return date_.GetNoArena();
}
inline void Email::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.Email.date)
}
#if LANG_CXX11
inline void Email::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.Email.date)
}
#endif
inline void Email::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.Email.date)
}
inline void Email::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.Email.date)
}
inline ::std::string* Email::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:mail.Email.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_date() {
  // @@protoc_insertion_point(field_release:mail.Email.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_date(::std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:mail.Email.date)
}

// string id = 4;
inline void Email::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Email::id() const {
  // @@protoc_insertion_point(field_get:mail.Email.id)
  return id_.GetNoArena();
}
inline void Email::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.Email.id)
}
#if LANG_CXX11
inline void Email::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.Email.id)
}
#endif
inline void Email::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.Email.id)
}
inline void Email::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.Email.id)
}
inline ::std::string* Email::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:mail.Email.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Email::release_id() {
  // @@protoc_insertion_point(field_release:mail.Email.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Email::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mail.Email.id)
}

// -------------------------------------------------------------------

// GetMailRequest

// string user = 1;
inline void GetMailRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMailRequest::user() const {
  // @@protoc_insertion_point(field_get:mail.GetMailRequest.user)
  return user_.GetNoArena();
}
inline void GetMailRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.GetMailRequest.user)
}
#if LANG_CXX11
inline void GetMailRequest::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.GetMailRequest.user)
}
#endif
inline void GetMailRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.GetMailRequest.user)
}
inline void GetMailRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.GetMailRequest.user)
}
inline ::std::string* GetMailRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:mail.GetMailRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMailRequest::release_user() {
  // @@protoc_insertion_point(field_release:mail.GetMailRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMailRequest::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:mail.GetMailRequest.user)
}

// string email_id = 2;
inline void GetMailRequest::clear_email_id() {
  email_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMailRequest::email_id() const {
  // @@protoc_insertion_point(field_get:mail.GetMailRequest.email_id)
  return email_id_.GetNoArena();
}
inline void GetMailRequest::set_email_id(const ::std::string& value) {
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.GetMailRequest.email_id)
}
#if LANG_CXX11
inline void GetMailRequest::set_email_id(::std::string&& value) {
  
  email_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.GetMailRequest.email_id)
}
#endif
inline void GetMailRequest::set_email_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.GetMailRequest.email_id)
}
inline void GetMailRequest::set_email_id(const char* value, size_t size) {
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.GetMailRequest.email_id)
}
inline ::std::string* GetMailRequest::mutable_email_id() {
  
  // @@protoc_insertion_point(field_mutable:mail.GetMailRequest.email_id)
  return email_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMailRequest::release_email_id() {
  // @@protoc_insertion_point(field_release:mail.GetMailRequest.email_id)
  
  return email_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMailRequest::set_allocated_email_id(::std::string* email_id) {
  if (email_id != nullptr) {
    
  } else {
    
  }
  email_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_id);
  // @@protoc_insertion_point(field_set_allocated:mail.GetMailRequest.email_id)
}

// -------------------------------------------------------------------

// GetMailReply

// string content = 1;
inline void GetMailReply::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMailReply::content() const {
  // @@protoc_insertion_point(field_get:mail.GetMailReply.content)
  return content_.GetNoArena();
}
inline void GetMailReply::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.GetMailReply.content)
}
#if LANG_CXX11
inline void GetMailReply::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.GetMailReply.content)
}
#endif
inline void GetMailReply::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.GetMailReply.content)
}
inline void GetMailReply::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.GetMailReply.content)
}
inline ::std::string* GetMailReply::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:mail.GetMailReply.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMailReply::release_content() {
  // @@protoc_insertion_point(field_release:mail.GetMailReply.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMailReply::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mail.GetMailReply.content)
}

// -------------------------------------------------------------------

// PutMailRequest

// string receiver = 1;
inline void PutMailRequest::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailRequest::receiver() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.receiver)
  return receiver_.GetNoArena();
}
inline void PutMailRequest::set_receiver(const ::std::string& value) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.receiver)
}
#if LANG_CXX11
inline void PutMailRequest::set_receiver(::std::string&& value) {
  
  receiver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailRequest.receiver)
}
#endif
inline void PutMailRequest::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailRequest.receiver)
}
inline void PutMailRequest::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailRequest.receiver)
}
inline ::std::string* PutMailRequest::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailRequest.receiver)
  return receiver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailRequest::release_receiver() {
  // @@protoc_insertion_point(field_release:mail.PutMailRequest.receiver)
  
  return receiver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailRequest::set_allocated_receiver(::std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailRequest.receiver)
}

// string created_time = 2;
inline void PutMailRequest::clear_created_time() {
  created_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailRequest::created_time() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.created_time)
  return created_time_.GetNoArena();
}
inline void PutMailRequest::set_created_time(const ::std::string& value) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.created_time)
}
#if LANG_CXX11
inline void PutMailRequest::set_created_time(::std::string&& value) {
  
  created_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailRequest.created_time)
}
#endif
inline void PutMailRequest::set_created_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailRequest.created_time)
}
inline void PutMailRequest::set_created_time(const char* value, size_t size) {
  
  created_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailRequest.created_time)
}
inline ::std::string* PutMailRequest::mutable_created_time() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailRequest.created_time)
  return created_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailRequest::release_created_time() {
  // @@protoc_insertion_point(field_release:mail.PutMailRequest.created_time)
  
  return created_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailRequest::set_allocated_created_time(::std::string* created_time) {
  if (created_time != nullptr) {
    
  } else {
    
  }
  created_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), created_time);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailRequest.created_time)
}

// string subject = 3;
inline void PutMailRequest::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailRequest::subject() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.subject)
  return subject_.GetNoArena();
}
inline void PutMailRequest::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.subject)
}
#if LANG_CXX11
inline void PutMailRequest::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailRequest.subject)
}
#endif
inline void PutMailRequest::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailRequest.subject)
}
inline void PutMailRequest::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailRequest.subject)
}
inline ::std::string* PutMailRequest::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailRequest.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailRequest::release_subject() {
  // @@protoc_insertion_point(field_release:mail.PutMailRequest.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailRequest::set_allocated_subject(::std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailRequest.subject)
}

// string sender = 4;
inline void PutMailRequest::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailRequest::sender() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.sender)
  return sender_.GetNoArena();
}
inline void PutMailRequest::set_sender(const ::std::string& value) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.sender)
}
#if LANG_CXX11
inline void PutMailRequest::set_sender(::std::string&& value) {
  
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailRequest.sender)
}
#endif
inline void PutMailRequest::set_sender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailRequest.sender)
}
inline void PutMailRequest::set_sender(const char* value, size_t size) {
  
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailRequest.sender)
}
inline ::std::string* PutMailRequest::mutable_sender() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailRequest.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailRequest::release_sender() {
  // @@protoc_insertion_point(field_release:mail.PutMailRequest.sender)
  
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailRequest::set_allocated_sender(::std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailRequest.sender)
}

// string content = 5;
inline void PutMailRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailRequest::content() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.content)
  return content_.GetNoArena();
}
inline void PutMailRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.content)
}
#if LANG_CXX11
inline void PutMailRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailRequest.content)
}
#endif
inline void PutMailRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailRequest.content)
}
inline void PutMailRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailRequest.content)
}
inline ::std::string* PutMailRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailRequest::release_content() {
  // @@protoc_insertion_point(field_release:mail.PutMailRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailRequest::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailRequest.content)
}

// int32 size = 6;
inline void PutMailRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 PutMailRequest::size() const {
  // @@protoc_insertion_point(field_get:mail.PutMailRequest.size)
  return size_;
}
inline void PutMailRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:mail.PutMailRequest.size)
}

// -------------------------------------------------------------------

// PutMailReply

// string email_id = 1;
inline void PutMailReply::clear_email_id() {
  email_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutMailReply::email_id() const {
  // @@protoc_insertion_point(field_get:mail.PutMailReply.email_id)
  return email_id_.GetNoArena();
}
inline void PutMailReply::set_email_id(const ::std::string& value) {
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mail.PutMailReply.email_id)
}
#if LANG_CXX11
inline void PutMailReply::set_email_id(::std::string&& value) {
  
  email_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mail.PutMailReply.email_id)
}
#endif
inline void PutMailReply::set_email_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mail.PutMailReply.email_id)
}
inline void PutMailReply::set_email_id(const char* value, size_t size) {
  
  email_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mail.PutMailReply.email_id)
}
inline ::std::string* PutMailReply::mutable_email_id() {
  
  // @@protoc_insertion_point(field_mutable:mail.PutMailReply.email_id)
  return email_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutMailReply::release_email_id() {
  // @@protoc_insertion_point(field_release:mail.PutMailReply.email_id)
  
  return email_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutMailReply::set_allocated_email_id(::std::string* email_id) {
  if (email_id != nullptr) {
    
  } else {
    
  }
  email_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_id);
  // @@protoc_insertion_point(field_set_allocated:mail.PutMailReply.email_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mail

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_mail_2eproto
