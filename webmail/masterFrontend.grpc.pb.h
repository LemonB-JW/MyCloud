// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterFrontend.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_masterFrontend_2eproto__INCLUDED
#define GRPC_masterFrontend_2eproto__INCLUDED

#include "masterFrontend.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace masterFrontend {

// 
class MasterFrontend final {
 public:
  static constexpr char const* service_full_name() {
    return "masterFrontend.MasterFrontend";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::masterFrontend::getServerListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>> AsyncgetServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>>(AsyncgetServerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>> PrepareAsyncgetServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>>(PrepareAsyncgetServerListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getServerList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterFrontend::getServerListReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>* AsyncgetServerListRaw(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterFrontend::getServerListReply>* PrepareAsyncgetServerListRaw(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::masterFrontend::getServerListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>> AsyncgetServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>>(AsyncgetServerListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>> PrepareAsyncgetServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>>(PrepareAsyncgetServerListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getServerList(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response, std::function<void(::grpc::Status)>) override;
      void getServerList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterFrontend::getServerListReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>* AsyncgetServerListRaw(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterFrontend::getServerListReply>* PrepareAsyncgetServerListRaw(::grpc::ClientContext* context, const ::masterFrontend::getServerListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getServerList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getServerList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetServerList(::grpc::ServerContext* context, ::masterFrontend::getServerListRequest* request, ::grpc::ServerAsyncResponseWriter< ::masterFrontend::getServerListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getServerList<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getServerList() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::masterFrontend::getServerListRequest, ::masterFrontend::getServerListReply>(
          [this](::grpc::ServerContext* context,
                 const ::masterFrontend::getServerListRequest* request,
                 ::masterFrontend::getServerListReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getServerList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getServerList<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getServerList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getServerList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetServerList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getServerList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getServerList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getServerList(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getServerList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::masterFrontend::getServerListRequest, ::masterFrontend::getServerListReply>(std::bind(&WithStreamedUnaryMethod_getServerList<BaseClass>::StreamedgetServerList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getServerList(::grpc::ServerContext* context, const ::masterFrontend::getServerListRequest* request, ::masterFrontend::getServerListReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetServerList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterFrontend::getServerListRequest,::masterFrontend::getServerListReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getServerList<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getServerList<Service > StreamedService;
};

}  // namespace masterFrontend


#endif  // GRPC_masterFrontend_2eproto__INCLUDED
