// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterBackend.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_masterBackend_2eproto__INCLUDED
#define GRPC_masterBackend_2eproto__INCLUDED

#include "masterBackend.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace masterBackend {

// 
class MasterBackend final {
 public:
  static constexpr char const* service_full_name() {
    return "masterBackend.MasterBackend";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::masterBackend::GetPrimReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>> Asyncget_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>>(Asyncget_primRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>> PrepareAsyncget_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>>(PrepareAsyncget_primRaw(context, request, cq));
    }
    virtual ::grpc::Status list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::masterBackend::ListSubReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>> Asynclist_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>>(Asynclist_subRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>> PrepareAsynclist_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>>(PrepareAsynclist_subRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get_prim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void list_sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>* Asyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::GetPrimReply>* PrepareAsyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>* Asynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::masterBackend::ListSubReply>* PrepareAsynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::masterBackend::GetPrimReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>> Asyncget_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>>(Asyncget_primRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>> PrepareAsyncget_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>>(PrepareAsyncget_primRaw(context, request, cq));
    }
    ::grpc::Status list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::masterBackend::ListSubReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>> Asynclist_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>>(Asynclist_subRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>> PrepareAsynclist_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>>(PrepareAsynclist_subRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void get_prim(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)>) override;
      void get_prim(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::GetPrimReply* response, std::function<void(::grpc::Status)>) override;
      void list_sub(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)>) override;
      void list_sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterBackend::ListSubReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>* Asyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterBackend::GetPrimReply>* PrepareAsyncget_primRaw(::grpc::ClientContext* context, const ::masterBackend::GetPrimRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>* Asynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::masterBackend::ListSubReply>* PrepareAsynclist_subRaw(::grpc::ClientContext* context, const ::masterBackend::ListSubRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_get_prim_;
    const ::grpc::internal::RpcMethod rpcmethod_list_sub_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response);
    virtual ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_get_prim() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_prim(::grpc::ServerContext* context, ::masterBackend::GetPrimRequest* request, ::grpc::ServerAsyncResponseWriter< ::masterBackend::GetPrimReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_list_sub() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_sub(::grpc::ServerContext* context, ::masterBackend::ListSubRequest* request, ::grpc::ServerAsyncResponseWriter< ::masterBackend::ListSubReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_get_prim<WithAsyncMethod_list_sub<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_get_prim() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::masterBackend::GetPrimRequest, ::masterBackend::GetPrimReply>(
          [this](::grpc::ServerContext* context,
                 const ::masterBackend::GetPrimRequest* request,
                 ::masterBackend::GetPrimReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->get_prim(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_list_sub() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::masterBackend::ListSubRequest, ::masterBackend::ListSubReply>(
          [this](::grpc::ServerContext* context,
                 const ::masterBackend::ListSubRequest* request,
                 ::masterBackend::ListSubReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->list_sub(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_get_prim<ExperimentalWithCallbackMethod_list_sub<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_get_prim() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_list_sub() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_get_prim() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget_prim(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_list_sub() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlist_sub(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_get_prim() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->get_prim(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void get_prim(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_list_sub() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->list_sub(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void list_sub(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get_prim : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_get_prim() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::masterBackend::GetPrimRequest, ::masterBackend::GetPrimReply>(std::bind(&WithStreamedUnaryMethod_get_prim<BaseClass>::Streamedget_prim, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_get_prim() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get_prim(::grpc::ServerContext* context, const ::masterBackend::GetPrimRequest* request, ::masterBackend::GetPrimReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget_prim(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterBackend::GetPrimRequest,::masterBackend::GetPrimReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_list_sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_list_sub() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::masterBackend::ListSubRequest, ::masterBackend::ListSubReply>(std::bind(&WithStreamedUnaryMethod_list_sub<BaseClass>::Streamedlist_sub, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_list_sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status list_sub(::grpc::ServerContext* context, const ::masterBackend::ListSubRequest* request, ::masterBackend::ListSubReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlist_sub(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::masterBackend::ListSubRequest,::masterBackend::ListSubReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get_prim<WithStreamedUnaryMethod_list_sub<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get_prim<WithStreamedUnaryMethod_list_sub<Service > > StreamedService;
};

}  // namespace masterBackend


#endif  // GRPC_masterBackend_2eproto__INCLUDED
