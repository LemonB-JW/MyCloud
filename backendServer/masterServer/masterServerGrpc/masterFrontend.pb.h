// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterFrontend.proto

#ifndef PROTOBUF_INCLUDED_masterFrontend_2eproto
#define PROTOBUF_INCLUDED_masterFrontend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterFrontend_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_masterFrontend_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_masterFrontend_2eproto();
namespace masterFrontend {
class frontendRequest;
class frontendRequestDefaultTypeInternal;
extern frontendRequestDefaultTypeInternal _frontendRequest_default_instance_;
class masterReply;
class masterReplyDefaultTypeInternal;
extern masterReplyDefaultTypeInternal _masterReply_default_instance_;
}  // namespace masterFrontend
namespace google {
namespace protobuf {
template<> ::masterFrontend::frontendRequest* Arena::CreateMaybeMessage<::masterFrontend::frontendRequest>(Arena*);
template<> ::masterFrontend::masterReply* Arena::CreateMaybeMessage<::masterFrontend::masterReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace masterFrontend {

// ===================================================================

class frontendRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:masterFrontend.frontendRequest) */ {
 public:
  frontendRequest();
  virtual ~frontendRequest();

  frontendRequest(const frontendRequest& from);

  inline frontendRequest& operator=(const frontendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  frontendRequest(frontendRequest&& from) noexcept
    : frontendRequest() {
    *this = ::std::move(from);
  }

  inline frontendRequest& operator=(frontendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const frontendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const frontendRequest* internal_default_instance() {
    return reinterpret_cast<const frontendRequest*>(
               &_frontendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(frontendRequest* other);
  friend void swap(frontendRequest& a, frontendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline frontendRequest* New() const final {
    return CreateMaybeMessage<frontendRequest>(nullptr);
  }

  frontendRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<frontendRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const frontendRequest& from);
  void MergeFrom(const frontendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(frontendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:masterFrontend.frontendRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterFrontend_2eproto;
};
// -------------------------------------------------------------------

class masterReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:masterFrontend.masterReply) */ {
 public:
  masterReply();
  virtual ~masterReply();

  masterReply(const masterReply& from);

  inline masterReply& operator=(const masterReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  masterReply(masterReply&& from) noexcept
    : masterReply() {
    *this = ::std::move(from);
  }

  inline masterReply& operator=(masterReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const masterReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const masterReply* internal_default_instance() {
    return reinterpret_cast<const masterReply*>(
               &_masterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(masterReply* other);
  friend void swap(masterReply& a, masterReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline masterReply* New() const final {
    return CreateMaybeMessage<masterReply>(nullptr);
  }

  masterReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<masterReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const masterReply& from);
  void MergeFrom(const masterReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(masterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_ipport = 1;
  void clear_server_ipport();
  static const int kServerIpportFieldNumber = 1;
  const ::std::string& server_ipport() const;
  void set_server_ipport(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ipport(::std::string&& value);
  #endif
  void set_server_ipport(const char* value);
  void set_server_ipport(const char* value, size_t size);
  ::std::string* mutable_server_ipport();
  ::std::string* release_server_ipport();
  void set_allocated_server_ipport(::std::string* server_ipport);

  // @@protoc_insertion_point(class_scope:masterFrontend.masterReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_ipport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterFrontend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// frontendRequest

// string user_name = 1;
inline void frontendRequest::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& frontendRequest::user_name() const {
  // @@protoc_insertion_point(field_get:masterFrontend.frontendRequest.user_name)
  return user_name_.GetNoArena();
}
inline void frontendRequest::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterFrontend.frontendRequest.user_name)
}
#if LANG_CXX11
inline void frontendRequest::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterFrontend.frontendRequest.user_name)
}
#endif
inline void frontendRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterFrontend.frontendRequest.user_name)
}
inline void frontendRequest::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterFrontend.frontendRequest.user_name)
}
inline ::std::string* frontendRequest::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:masterFrontend.frontendRequest.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* frontendRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:masterFrontend.frontendRequest.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void frontendRequest::set_allocated_user_name(::std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:masterFrontend.frontendRequest.user_name)
}

// -------------------------------------------------------------------

// masterReply

// string server_ipport = 1;
inline void masterReply::clear_server_ipport() {
  server_ipport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& masterReply::server_ipport() const {
  // @@protoc_insertion_point(field_get:masterFrontend.masterReply.server_ipport)
  return server_ipport_.GetNoArena();
}
inline void masterReply::set_server_ipport(const ::std::string& value) {
  
  server_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterFrontend.masterReply.server_ipport)
}
#if LANG_CXX11
inline void masterReply::set_server_ipport(::std::string&& value) {
  
  server_ipport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterFrontend.masterReply.server_ipport)
}
#endif
inline void masterReply::set_server_ipport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterFrontend.masterReply.server_ipport)
}
inline void masterReply::set_server_ipport(const char* value, size_t size) {
  
  server_ipport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterFrontend.masterReply.server_ipport)
}
inline ::std::string* masterReply::mutable_server_ipport() {
  
  // @@protoc_insertion_point(field_mutable:masterFrontend.masterReply.server_ipport)
  return server_ipport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* masterReply::release_server_ipport() {
  // @@protoc_insertion_point(field_release:masterFrontend.masterReply.server_ipport)
  
  return server_ipport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void masterReply::set_allocated_server_ipport(::std::string* server_ipport) {
  if (server_ipport != nullptr) {
    
  } else {
    
  }
  server_ipport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ipport);
  // @@protoc_insertion_point(field_set_allocated:masterFrontend.masterReply.server_ipport)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterFrontend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_masterFrontend_2eproto
